/* tslint:disable */
/* eslint-disable */
/**
 * oauth/oauth.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OauthAuthorizeResponse,
  OauthTokenRequest,
  OauthTokenResponse,
  RpcStatus,
} from '../models';
import {
    OauthAuthorizeResponseFromJSON,
    OauthAuthorizeResponseToJSON,
    OauthTokenRequestFromJSON,
    OauthTokenRequestToJSON,
    OauthTokenResponseFromJSON,
    OauthTokenResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface OAuthServiceAuthorizeRequest {
    clientId?: string;
    responseType?: string;
    redirectUri?: string;
}

export interface OAuthServiceTokenRequest {
    body: OauthTokenRequest;
}

/**
 * 
 */
export class OAuthServiceApi extends runtime.BaseAPI {

    /**
     */
    async oAuthServiceAuthorizeRaw(requestParameters: OAuthServiceAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OauthAuthorizeResponse>> {
        const queryParameters: any = {};

        if (requestParameters.clientId !== undefined) {
            queryParameters['clientId'] = requestParameters.clientId;
        }

        if (requestParameters.responseType !== undefined) {
            queryParameters['responseType'] = requestParameters.responseType;
        }

        if (requestParameters.redirectUri !== undefined) {
            queryParameters['redirectUri'] = requestParameters.redirectUri;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth.oauth.OAuthService/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OauthAuthorizeResponseFromJSON(jsonValue));
    }

    /**
     */
    async oAuthServiceAuthorize(requestParameters: OAuthServiceAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OauthAuthorizeResponse> {
        const response = await this.oAuthServiceAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async oAuthServiceTokenRaw(requestParameters: OAuthServiceTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OauthTokenResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling oAuthServiceToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/oauth.oauth.OAuthService/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OauthTokenRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OauthTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async oAuthServiceToken(requestParameters: OAuthServiceTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OauthTokenResponse> {
        const response = await this.oAuthServiceTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
