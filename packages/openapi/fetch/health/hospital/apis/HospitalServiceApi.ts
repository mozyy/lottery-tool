/* tslint:disable */
/* eslint-disable */
/**
 * health/hospital.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HealthhospitalCreateRequest,
  HealthhospitalCreateResponse,
  HealthhospitalGetResponse,
  HealthhospitalListResponse,
  HealthhospitalUpdateResponse,
  HospitalServiceUpdateRequest,
  RpcStatus,
} from '../models';
import {
    HealthhospitalCreateRequestFromJSON,
    HealthhospitalCreateRequestToJSON,
    HealthhospitalCreateResponseFromJSON,
    HealthhospitalCreateResponseToJSON,
    HealthhospitalGetResponseFromJSON,
    HealthhospitalGetResponseToJSON,
    HealthhospitalListResponseFromJSON,
    HealthhospitalListResponseToJSON,
    HealthhospitalUpdateResponseFromJSON,
    HealthhospitalUpdateResponseToJSON,
    HospitalServiceUpdateRequestFromJSON,
    HospitalServiceUpdateRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface HospitalServiceCreateRequest {
    body: HealthhospitalCreateRequest;
}

export interface HospitalServiceDeleteRequest {
    id: number;
}

export interface HospitalServiceGetRequest {
    id: number;
}

export interface HospitalServiceListRequest {
    paginatePage?: number;
    paginatePerPage?: number;
}

export interface HospitalServiceUpdateOperationRequest {
    id: number;
    body: HospitalServiceUpdateRequest;
}

/**
 * 
 */
export class HospitalServiceApi extends runtime.BaseAPI {

    /**
     */
    async hospitalServiceCreateRaw(requestParameters: HospitalServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthhospitalCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling hospitalServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health.hospital.HospitalService/hospitals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HealthhospitalCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthhospitalCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async hospitalServiceCreate(requestParameters: HospitalServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthhospitalCreateResponse> {
        const response = await this.hospitalServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hospitalServiceDeleteRaw(requestParameters: HospitalServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hospitalServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.hospital.HospitalService/hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async hospitalServiceDelete(requestParameters: HospitalServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.hospitalServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hospitalServiceGetRaw(requestParameters: HospitalServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthhospitalGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hospitalServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.hospital.HospitalService/hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthhospitalGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async hospitalServiceGet(requestParameters: HospitalServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthhospitalGetResponse> {
        const response = await this.hospitalServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hospitalServiceListRaw(requestParameters: HospitalServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthhospitalListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.paginatePage !== undefined) {
            queryParameters['paginate.page'] = requestParameters.paginatePage;
        }

        if (requestParameters.paginatePerPage !== undefined) {
            queryParameters['paginate.perPage'] = requestParameters.paginatePerPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.hospital.HospitalService/hospitals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthhospitalListResponseFromJSON(jsonValue));
    }

    /**
     */
    async hospitalServiceList(requestParameters: HospitalServiceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthhospitalListResponse> {
        const response = await this.hospitalServiceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hospitalServiceUpdateRaw(requestParameters: HospitalServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthhospitalUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hospitalServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling hospitalServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health.hospital.HospitalService/hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: HospitalServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthhospitalUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async hospitalServiceUpdate(requestParameters: HospitalServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthhospitalUpdateResponse> {
        const response = await this.hospitalServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
