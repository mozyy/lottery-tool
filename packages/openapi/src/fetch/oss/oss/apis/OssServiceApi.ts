/* tslint:disable */
/* eslint-disable */
/**
 * oss/oss.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OssServiceUpdateRequest,
  OssossCreateRequest,
  OssossCreateResponse,
  OssossGetResponse,
  OssossListResponse,
  OssossUpdateResponse,
  RpcStatus,
} from '../models';
import {
    OssServiceUpdateRequestFromJSON,
    OssServiceUpdateRequestToJSON,
    OssossCreateRequestFromJSON,
    OssossCreateRequestToJSON,
    OssossCreateResponseFromJSON,
    OssossCreateResponseToJSON,
    OssossGetResponseFromJSON,
    OssossGetResponseToJSON,
    OssossListResponseFromJSON,
    OssossListResponseToJSON,
    OssossUpdateResponseFromJSON,
    OssossUpdateResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface OssServiceCreateRequest {
    body: OssossCreateRequest;
}

export interface OssServiceDeleteRequest {
    id: number;
}

export interface OssServiceGetRequest {
    id: number;
}

export interface OssServiceListRequest {
    ids?: Array<number>;
    paginatePage?: number;
    paginatePerPage?: number;
}

export interface OssServiceUpdateOperationRequest {
    id: number;
    body: OssServiceUpdateRequest;
}

/**
 * 
 */
export class OssServiceApi extends runtime.BaseAPI {

    /**
     */
    async ossServiceCreateRaw(requestParameters: OssServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OssossCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling ossServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/oss.oss.OssService/oss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OssossCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OssossCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async ossServiceCreate(requestParameters: OssServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OssossCreateResponse> {
        const response = await this.ossServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ossServiceDeleteRaw(requestParameters: OssServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ossServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oss.oss.OssService/oss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async ossServiceDelete(requestParameters: OssServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.ossServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ossServiceGetRaw(requestParameters: OssServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OssossGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ossServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oss.oss.OssService/oss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OssossGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async ossServiceGet(requestParameters: OssServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OssossGetResponse> {
        const response = await this.ossServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ossServiceListRaw(requestParameters: OssServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OssossListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        if (requestParameters.paginatePage !== undefined) {
            queryParameters['paginate.page'] = requestParameters.paginatePage;
        }

        if (requestParameters.paginatePerPage !== undefined) {
            queryParameters['paginate.perPage'] = requestParameters.paginatePerPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oss.oss.OssService/oss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OssossListResponseFromJSON(jsonValue));
    }

    /**
     */
    async ossServiceList(requestParameters: OssServiceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OssossListResponse> {
        const response = await this.ossServiceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ossServiceUpdateRaw(requestParameters: OssServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OssossUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ossServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling ossServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/oss.oss.OssService/oss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: OssServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OssossUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async ossServiceUpdate(requestParameters: OssServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OssossUpdateResponse> {
        const response = await this.ossServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
