/* tslint:disable */
/* eslint-disable */
/**
 * user/auth.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthAuthorizeResponse,
  AuthRefreshRequest,
  AuthToken,
  AuthTokenRequest,
  RpcStatus,
} from '../models';
import {
    AuthAuthorizeResponseFromJSON,
    AuthAuthorizeResponseToJSON,
    AuthRefreshRequestFromJSON,
    AuthRefreshRequestToJSON,
    AuthTokenFromJSON,
    AuthTokenToJSON,
    AuthTokenRequestFromJSON,
    AuthTokenRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface AuthServiceAuthorizeRequest {
    responseType?: string;
    clientId?: string;
    redirectUri?: string;
    scope?: string;
    state?: string;
    state2Id?: number;
    state2Code?: string;
    state2UserId?: string;
    state2ClientId?: string;
    state2Scope?: string;
    state2RedirectUri?: string;
    state2Until?: Date;
    state2CreatedAt?: Date;
    state2UpdatedAt?: Date;
}

export interface AuthServiceGetTokenRequest {
    body: AuthTokenRequest;
}

export interface AuthServiceRefreshRequest {
    body: AuthRefreshRequest;
}

/**
 * 
 */
export class AuthServiceApi extends runtime.BaseAPI {

    /**
     */
    async authServiceAuthorizeRaw(requestParameters: AuthServiceAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthAuthorizeResponse>> {
        const queryParameters: any = {};

        if (requestParameters.responseType !== undefined) {
            queryParameters['responseType'] = requestParameters.responseType;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['clientId'] = requestParameters.clientId;
        }

        if (requestParameters.redirectUri !== undefined) {
            queryParameters['redirectUri'] = requestParameters.redirectUri;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.state2Id !== undefined) {
            queryParameters['state2.id'] = requestParameters.state2Id;
        }

        if (requestParameters.state2Code !== undefined) {
            queryParameters['state2.code'] = requestParameters.state2Code;
        }

        if (requestParameters.state2UserId !== undefined) {
            queryParameters['state2.userId'] = requestParameters.state2UserId;
        }

        if (requestParameters.state2ClientId !== undefined) {
            queryParameters['state2.clientId'] = requestParameters.state2ClientId;
        }

        if (requestParameters.state2Scope !== undefined) {
            queryParameters['state2.scope'] = requestParameters.state2Scope;
        }

        if (requestParameters.state2RedirectUri !== undefined) {
            queryParameters['state2.redirectUri'] = requestParameters.state2RedirectUri;
        }

        if (requestParameters.state2Until !== undefined) {
            queryParameters['state2.until'] = (requestParameters.state2Until as any).toISOString();
        }

        if (requestParameters.state2CreatedAt !== undefined) {
            queryParameters['state2.createdAt'] = (requestParameters.state2CreatedAt as any).toISOString();
        }

        if (requestParameters.state2UpdatedAt !== undefined) {
            queryParameters['state2.updatedAt'] = (requestParameters.state2UpdatedAt as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user.auth.AuthService/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthAuthorizeResponseFromJSON(jsonValue));
    }

    /**
     */
    async authServiceAuthorize(requestParameters: AuthServiceAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthAuthorizeResponse> {
        const response = await this.authServiceAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authServiceGetTokenRaw(requestParameters: AuthServiceGetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthToken>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authServiceGetToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user.auth.AuthService/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthTokenRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     */
    async authServiceGetToken(requestParameters: AuthServiceGetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthToken> {
        const response = await this.authServiceGetTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authServiceRefreshRaw(requestParameters: AuthServiceRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthToken>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authServiceRefresh.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user.auth.AuthService/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRefreshRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     */
    async authServiceRefresh(requestParameters: AuthServiceRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthToken> {
        const response = await this.authServiceRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
