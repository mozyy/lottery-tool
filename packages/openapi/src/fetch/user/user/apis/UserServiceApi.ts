/* tslint:disable */
/* eslint-disable */
/**
 * user/user.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthToken,
  RpcStatus,
  UserGetInfoResponse,
  UserGetResponse,
  UserLoginMobileRequest,
  UserLoginWeixinRequest,
  UserRegisterMobileRequest,
  UserServiceUpdateInfoRequest,
  UserUpdateInfoResponse,
} from '../models';
import {
    AuthTokenFromJSON,
    AuthTokenToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    UserGetInfoResponseFromJSON,
    UserGetInfoResponseToJSON,
    UserGetResponseFromJSON,
    UserGetResponseToJSON,
    UserLoginMobileRequestFromJSON,
    UserLoginMobileRequestToJSON,
    UserLoginWeixinRequestFromJSON,
    UserLoginWeixinRequestToJSON,
    UserRegisterMobileRequestFromJSON,
    UserRegisterMobileRequestToJSON,
    UserServiceUpdateInfoRequestFromJSON,
    UserServiceUpdateInfoRequestToJSON,
    UserUpdateInfoResponseFromJSON,
    UserUpdateInfoResponseToJSON,
} from '../models';

export interface UserServiceGetRequest {
    id: string;
}

export interface UserServiceGetInfoRequest {
    id: number;
}

export interface UserServiceLoginMobileRequest {
    body: UserLoginMobileRequest;
}

export interface UserServiceLoginWeixinRequest {
    body: UserLoginWeixinRequest;
}

export interface UserServiceRegisterMobileRequest {
    body: UserRegisterMobileRequest;
}

export interface UserServiceUpdateInfoOperationRequest {
    id: number;
    body: UserServiceUpdateInfoRequest;
}

/**
 * 
 */
export class UserServiceApi extends runtime.BaseAPI {

    /**
     */
    async userServiceGetRaw(requestParameters: UserServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wx.user.UserService/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceGet(requestParameters: UserServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserGetResponse> {
        const response = await this.userServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userServiceGetInfoRaw(requestParameters: UserServiceGetInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserGetInfoResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userServiceGetInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wx.user.UserService/info/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserGetInfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceGetInfo(requestParameters: UserServiceGetInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserGetInfoResponse> {
        const response = await this.userServiceGetInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userServiceLoginMobileRaw(requestParameters: UserServiceLoginMobileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthToken>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userServiceLoginMobile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user.user.UserService/loginMobile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginMobileRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     */
    async userServiceLoginMobile(requestParameters: UserServiceLoginMobileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthToken> {
        const response = await this.userServiceLoginMobileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userServiceLoginWeixinRaw(requestParameters: UserServiceLoginWeixinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthToken>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userServiceLoginWeixin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user.user.UserService/loginWeixin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginWeixinRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     */
    async userServiceLoginWeixin(requestParameters: UserServiceLoginWeixinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthToken> {
        const response = await this.userServiceLoginWeixinRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userServiceRegisterMobileRaw(requestParameters: UserServiceRegisterMobileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthToken>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userServiceRegisterMobile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user.user.UserService/registerMobile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRegisterMobileRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     */
    async userServiceRegisterMobile(requestParameters: UserServiceRegisterMobileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthToken> {
        const response = await this.userServiceRegisterMobileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userServiceUpdateInfoRaw(requestParameters: UserServiceUpdateInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserUpdateInfoResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userServiceUpdateInfo.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userServiceUpdateInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wx.user.UserService/info/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserServiceUpdateInfoRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserUpdateInfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceUpdateInfo(requestParameters: UserServiceUpdateInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserUpdateInfoResponse> {
        const response = await this.userServiceUpdateInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
