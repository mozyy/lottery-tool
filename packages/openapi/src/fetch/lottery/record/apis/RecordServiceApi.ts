/* tslint:disable */
/* eslint-disable */
/**
 * lottery/record.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LotteryrecordCreateRequest,
  LotteryrecordCreateResponse,
  LotteryrecordGetResponse,
  LotteryrecordListResponse,
  LotteryrecordUpdateResponse,
  RecordServiceUpdateRequest,
  RpcStatus,
} from '../models';
import {
    LotteryrecordCreateRequestFromJSON,
    LotteryrecordCreateRequestToJSON,
    LotteryrecordCreateResponseFromJSON,
    LotteryrecordCreateResponseToJSON,
    LotteryrecordGetResponseFromJSON,
    LotteryrecordGetResponseToJSON,
    LotteryrecordListResponseFromJSON,
    LotteryrecordListResponseToJSON,
    LotteryrecordUpdateResponseFromJSON,
    LotteryrecordUpdateResponseToJSON,
    RecordServiceUpdateRequestFromJSON,
    RecordServiceUpdateRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface RecordServiceCreateRequest {
    body: LotteryrecordCreateRequest;
}

export interface RecordServiceDeleteRequest {
    id: number;
}

export interface RecordServiceGetRequest {
    id: number;
}

export interface RecordServiceListRequest {
    recordId?: number;
    recordLotteryId?: number;
    recordUserId?: string;
    paginatePage?: number;
    paginatePerPage?: number;
}

export interface RecordServiceUpdateOperationRequest {
    id: number;
    body: RecordServiceUpdateRequest;
}

/**
 * 
 */
export class RecordServiceApi extends runtime.BaseAPI {

    /**
     */
    async recordServiceCreateRaw(requestParameters: RecordServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryrecordCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling recordServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["login"]);
        }

        const response = await this.request({
            path: `/lottery.record.RecordService/records`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LotteryrecordCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryrecordCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async recordServiceCreate(requestParameters: RecordServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryrecordCreateResponse> {
        const response = await this.recordServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recordServiceDeleteRaw(requestParameters: RecordServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling recordServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["login"]);
        }

        const response = await this.request({
            path: `/lottery.record.RecordService/records/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async recordServiceDelete(requestParameters: RecordServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.recordServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recordServiceGetRaw(requestParameters: RecordServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryrecordGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling recordServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["login"]);
        }

        const response = await this.request({
            path: `/lottery.record.RecordService/records/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryrecordGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async recordServiceGet(requestParameters: RecordServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryrecordGetResponse> {
        const response = await this.recordServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recordServiceListRaw(requestParameters: RecordServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryrecordListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.recordId !== undefined) {
            queryParameters['record.id'] = requestParameters.recordId;
        }

        if (requestParameters.recordLotteryId !== undefined) {
            queryParameters['record.lotteryId'] = requestParameters.recordLotteryId;
        }

        if (requestParameters.recordUserId !== undefined) {
            queryParameters['record.userId'] = requestParameters.recordUserId;
        }

        if (requestParameters.paginatePage !== undefined) {
            queryParameters['paginate.page'] = requestParameters.paginatePage;
        }

        if (requestParameters.paginatePerPage !== undefined) {
            queryParameters['paginate.perPage'] = requestParameters.paginatePerPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["login"]);
        }

        const response = await this.request({
            path: `/lottery.record.RecordService/records`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryrecordListResponseFromJSON(jsonValue));
    }

    /**
     */
    async recordServiceList(requestParameters: RecordServiceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryrecordListResponse> {
        const response = await this.recordServiceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recordServiceUpdateRaw(requestParameters: RecordServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryrecordUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling recordServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling recordServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["login"]);
        }

        const response = await this.request({
            path: `/lottery.record.RecordService/records/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RecordServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryrecordUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async recordServiceUpdate(requestParameters: RecordServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryrecordUpdateResponse> {
        const response = await this.recordServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
