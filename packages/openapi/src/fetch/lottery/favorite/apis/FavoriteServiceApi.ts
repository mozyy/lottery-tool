/* tslint:disable */
/* eslint-disable */
/**
 * lottery/favorite.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FavoriteServiceUpdateRequest,
  LotteryfavoriteCreateRequest,
  LotteryfavoriteCreateResponse,
  LotteryfavoriteGetResponse,
  LotteryfavoriteListResponse,
  LotteryfavoriteUpdateResponse,
  RpcStatus,
} from '../models';
import {
    FavoriteServiceUpdateRequestFromJSON,
    FavoriteServiceUpdateRequestToJSON,
    LotteryfavoriteCreateRequestFromJSON,
    LotteryfavoriteCreateRequestToJSON,
    LotteryfavoriteCreateResponseFromJSON,
    LotteryfavoriteCreateResponseToJSON,
    LotteryfavoriteGetResponseFromJSON,
    LotteryfavoriteGetResponseToJSON,
    LotteryfavoriteListResponseFromJSON,
    LotteryfavoriteListResponseToJSON,
    LotteryfavoriteUpdateResponseFromJSON,
    LotteryfavoriteUpdateResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface FavoriteServiceCreateRequest {
    body: LotteryfavoriteCreateRequest;
}

export interface FavoriteServiceDeleteRequest {
    id: number;
}

export interface FavoriteServiceGetRequest {
    id: number;
}

export interface FavoriteServiceListRequest {
    userId?: string;
    paginatePage?: number;
    paginatePerPage?: number;
}

export interface FavoriteServiceUpdateOperationRequest {
    id: number;
    body: FavoriteServiceUpdateRequest;
}

/**
 * 
 */
export class FavoriteServiceApi extends runtime.BaseAPI {

    /**
     */
    async favoriteServiceCreateRaw(requestParameters: FavoriteServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryfavoriteCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling favoriteServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lottery.favorite.FavoriteService/favorites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LotteryfavoriteCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryfavoriteCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async favoriteServiceCreate(requestParameters: FavoriteServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryfavoriteCreateResponse> {
        const response = await this.favoriteServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async favoriteServiceDeleteRaw(requestParameters: FavoriteServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling favoriteServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lottery.favorite.FavoriteService/favorites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async favoriteServiceDelete(requestParameters: FavoriteServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.favoriteServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async favoriteServiceGetRaw(requestParameters: FavoriteServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryfavoriteGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling favoriteServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lottery.favorite.FavoriteService/favorites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryfavoriteGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async favoriteServiceGet(requestParameters: FavoriteServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryfavoriteGetResponse> {
        const response = await this.favoriteServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async favoriteServiceListRaw(requestParameters: FavoriteServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryfavoriteListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.paginatePage !== undefined) {
            queryParameters['paginate.page'] = requestParameters.paginatePage;
        }

        if (requestParameters.paginatePerPage !== undefined) {
            queryParameters['paginate.perPage'] = requestParameters.paginatePerPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lottery.favorite.FavoriteService/favorites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryfavoriteListResponseFromJSON(jsonValue));
    }

    /**
     */
    async favoriteServiceList(requestParameters: FavoriteServiceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryfavoriteListResponse> {
        const response = await this.favoriteServiceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async favoriteServiceUpdateRaw(requestParameters: FavoriteServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryfavoriteUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling favoriteServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling favoriteServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lottery.favorite.FavoriteService/favorites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FavoriteServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryfavoriteUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async favoriteServiceUpdate(requestParameters: FavoriteServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryfavoriteUpdateResponse> {
        const response = await this.favoriteServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
