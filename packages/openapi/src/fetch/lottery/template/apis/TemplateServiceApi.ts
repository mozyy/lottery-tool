/* tslint:disable */
/* eslint-disable */
/**
 * lottery/template.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LotterytemplateCreateRequest,
  LotterytemplateCreateResponse,
  LotterytemplateGetByLotteryIdResponse,
  LotterytemplateGetResponse,
  LotterytemplateListResponse,
  LotterytemplateUpdateResponse,
  RpcStatus,
  TemplateServiceUpdateRequest,
} from '../models';
import {
    LotterytemplateCreateRequestFromJSON,
    LotterytemplateCreateRequestToJSON,
    LotterytemplateCreateResponseFromJSON,
    LotterytemplateCreateResponseToJSON,
    LotterytemplateGetByLotteryIdResponseFromJSON,
    LotterytemplateGetByLotteryIdResponseToJSON,
    LotterytemplateGetResponseFromJSON,
    LotterytemplateGetResponseToJSON,
    LotterytemplateListResponseFromJSON,
    LotterytemplateListResponseToJSON,
    LotterytemplateUpdateResponseFromJSON,
    LotterytemplateUpdateResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    TemplateServiceUpdateRequestFromJSON,
    TemplateServiceUpdateRequestToJSON,
} from '../models';

export interface TemplateServiceCreateRequest {
    body: LotterytemplateCreateRequest;
}

export interface TemplateServiceDeleteRequest {
    id: number;
}

export interface TemplateServiceGetRequest {
    id: number;
}

export interface TemplateServiceGetByLotteryIdRequest {
    lotteryId: number;
}

export interface TemplateServiceListRequest {
    paginatePage?: number;
    paginatePerPage?: number;
}

export interface TemplateServiceUpdateOperationRequest {
    id: number;
    body: TemplateServiceUpdateRequest;
}

/**
 * 
 */
export class TemplateServiceApi extends runtime.BaseAPI {

    /**
     */
    async templateServiceCreateRaw(requestParameters: TemplateServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotterytemplateCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling templateServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lottery.template.TemplateService/templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LotterytemplateCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotterytemplateCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async templateServiceCreate(requestParameters: TemplateServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotterytemplateCreateResponse> {
        const response = await this.templateServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async templateServiceDeleteRaw(requestParameters: TemplateServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling templateServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lottery.template.TemplateService/templates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async templateServiceDelete(requestParameters: TemplateServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.templateServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async templateServiceGetRaw(requestParameters: TemplateServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotterytemplateGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling templateServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lottery.template.TemplateService/templates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotterytemplateGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async templateServiceGet(requestParameters: TemplateServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotterytemplateGetResponse> {
        const response = await this.templateServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async templateServiceGetByLotteryIdRaw(requestParameters: TemplateServiceGetByLotteryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotterytemplateGetByLotteryIdResponse>> {
        if (requestParameters.lotteryId === null || requestParameters.lotteryId === undefined) {
            throw new runtime.RequiredError('lotteryId','Required parameter requestParameters.lotteryId was null or undefined when calling templateServiceGetByLotteryId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lottery.favorite.TemplateService/templates/lotterys/{lotteryId}`.replace(`{${"lotteryId"}}`, encodeURIComponent(String(requestParameters.lotteryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotterytemplateGetByLotteryIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async templateServiceGetByLotteryId(requestParameters: TemplateServiceGetByLotteryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotterytemplateGetByLotteryIdResponse> {
        const response = await this.templateServiceGetByLotteryIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async templateServiceListRaw(requestParameters: TemplateServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotterytemplateListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.paginatePage !== undefined) {
            queryParameters['paginate.page'] = requestParameters.paginatePage;
        }

        if (requestParameters.paginatePerPage !== undefined) {
            queryParameters['paginate.perPage'] = requestParameters.paginatePerPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lottery.template.TemplateService/templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotterytemplateListResponseFromJSON(jsonValue));
    }

    /**
     */
    async templateServiceList(requestParameters: TemplateServiceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotterytemplateListResponse> {
        const response = await this.templateServiceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async templateServiceUpdateRaw(requestParameters: TemplateServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotterytemplateUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling templateServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling templateServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lottery.template.TemplateService/templates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotterytemplateUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async templateServiceUpdate(requestParameters: TemplateServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotterytemplateUpdateResponse> {
        const response = await this.templateServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
