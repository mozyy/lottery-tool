/* tslint:disable */
/* eslint-disable */
/**
 * health/nurse.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HealthnurseCreateRequest,
  HealthnurseCreateResponse,
  HealthnurseGetResponse,
  HealthnurseListResponse,
  HealthnurseUpdateResponse,
  NurseServiceUpdateRequest,
  RpcStatus,
} from '../models';
import {
    HealthnurseCreateRequestFromJSON,
    HealthnurseCreateRequestToJSON,
    HealthnurseCreateResponseFromJSON,
    HealthnurseCreateResponseToJSON,
    HealthnurseGetResponseFromJSON,
    HealthnurseGetResponseToJSON,
    HealthnurseListResponseFromJSON,
    HealthnurseListResponseToJSON,
    HealthnurseUpdateResponseFromJSON,
    HealthnurseUpdateResponseToJSON,
    NurseServiceUpdateRequestFromJSON,
    NurseServiceUpdateRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface NurseServiceCreateRequest {
    body: HealthnurseCreateRequest;
}

export interface NurseServiceDeleteRequest {
    id: number;
}

export interface NurseServiceGetRequest {
    id: number;
}

export interface NurseServiceListRequest {
    paginatePage?: number;
    paginatePerPage?: number;
}

export interface NurseServiceUpdateOperationRequest {
    id: number;
    body: NurseServiceUpdateRequest;
}

/**
 * 
 */
export class NurseServiceApi extends runtime.BaseAPI {

    /**
     */
    async nurseServiceCreateRaw(requestParameters: NurseServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthnurseCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling nurseServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health.nurse.NurseService/nurses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HealthnurseCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthnurseCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async nurseServiceCreate(requestParameters: NurseServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthnurseCreateResponse> {
        const response = await this.nurseServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nurseServiceDeleteRaw(requestParameters: NurseServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nurseServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.nurse.NurseService/nurses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async nurseServiceDelete(requestParameters: NurseServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.nurseServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nurseServiceGetRaw(requestParameters: NurseServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthnurseGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nurseServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.nurse.NurseService/nurses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthnurseGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async nurseServiceGet(requestParameters: NurseServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthnurseGetResponse> {
        const response = await this.nurseServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nurseServiceListRaw(requestParameters: NurseServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthnurseListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.paginatePage !== undefined) {
            queryParameters['paginate.page'] = requestParameters.paginatePage;
        }

        if (requestParameters.paginatePerPage !== undefined) {
            queryParameters['paginate.perPage'] = requestParameters.paginatePerPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.nurse.NurseService/nurses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthnurseListResponseFromJSON(jsonValue));
    }

    /**
     */
    async nurseServiceList(requestParameters: NurseServiceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthnurseListResponse> {
        const response = await this.nurseServiceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nurseServiceUpdateRaw(requestParameters: NurseServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthnurseUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nurseServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling nurseServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health.nurse.NurseService/nurses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NurseServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthnurseUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async nurseServiceUpdate(requestParameters: NurseServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthnurseUpdateResponse> {
        const response = await this.nurseServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
