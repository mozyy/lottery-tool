/* tslint:disable */
/* eslint-disable */
/**
 * health/department.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HealthdepartmentCreateRequest,
  HealthdepartmentCreateResponse,
  HealthdepartmentGetResponse,
  HealthdepartmentListResponse,
  HealthdepartmentUpdateResponse,
  HepartmentServiceUpdateRequest,
  RpcStatus,
} from '../models';
import {
    HealthdepartmentCreateRequestFromJSON,
    HealthdepartmentCreateRequestToJSON,
    HealthdepartmentCreateResponseFromJSON,
    HealthdepartmentCreateResponseToJSON,
    HealthdepartmentGetResponseFromJSON,
    HealthdepartmentGetResponseToJSON,
    HealthdepartmentListResponseFromJSON,
    HealthdepartmentListResponseToJSON,
    HealthdepartmentUpdateResponseFromJSON,
    HealthdepartmentUpdateResponseToJSON,
    HepartmentServiceUpdateRequestFromJSON,
    HepartmentServiceUpdateRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface HepartmentServiceCreateRequest {
    body: HealthdepartmentCreateRequest;
}

export interface HepartmentServiceDeleteRequest {
    id: number;
}

export interface HepartmentServiceGetRequest {
    id: number;
}

export interface HepartmentServiceListRequest {
    paginatePage?: number;
    paginatePerPage?: number;
}

export interface HepartmentServiceUpdateOperationRequest {
    id: number;
    body: HepartmentServiceUpdateRequest;
}

/**
 * 
 */
export class HepartmentServiceApi extends runtime.BaseAPI {

    /**
     */
    async hepartmentServiceCreateRaw(requestParameters: HepartmentServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthdepartmentCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling hepartmentServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health.department.HepartmentService/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HealthdepartmentCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthdepartmentCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async hepartmentServiceCreate(requestParameters: HepartmentServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthdepartmentCreateResponse> {
        const response = await this.hepartmentServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hepartmentServiceDeleteRaw(requestParameters: HepartmentServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hepartmentServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.department.HepartmentService/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async hepartmentServiceDelete(requestParameters: HepartmentServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.hepartmentServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hepartmentServiceGetRaw(requestParameters: HepartmentServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthdepartmentGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hepartmentServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.department.HepartmentService/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthdepartmentGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async hepartmentServiceGet(requestParameters: HepartmentServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthdepartmentGetResponse> {
        const response = await this.hepartmentServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hepartmentServiceListRaw(requestParameters: HepartmentServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthdepartmentListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.paginatePage !== undefined) {
            queryParameters['paginate.page'] = requestParameters.paginatePage;
        }

        if (requestParameters.paginatePerPage !== undefined) {
            queryParameters['paginate.perPage'] = requestParameters.paginatePerPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.department.HepartmentService/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthdepartmentListResponseFromJSON(jsonValue));
    }

    /**
     */
    async hepartmentServiceList(requestParameters: HepartmentServiceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthdepartmentListResponse> {
        const response = await this.hepartmentServiceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hepartmentServiceUpdateRaw(requestParameters: HepartmentServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthdepartmentUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hepartmentServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling hepartmentServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health.department.HepartmentService/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HepartmentServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthdepartmentUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async hepartmentServiceUpdate(requestParameters: HepartmentServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthdepartmentUpdateResponse> {
        const response = await this.hepartmentServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
