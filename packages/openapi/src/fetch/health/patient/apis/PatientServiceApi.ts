/* tslint:disable */
/* eslint-disable */
/**
 * health/patient.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HealthpatientCreateRequest,
  HealthpatientCreateResponse,
  HealthpatientGetResponse,
  HealthpatientListResponse,
  HealthpatientUpdateResponse,
  PatientServiceUpdateRequest,
  RpcStatus,
} from '../models';
import {
    HealthpatientCreateRequestFromJSON,
    HealthpatientCreateRequestToJSON,
    HealthpatientCreateResponseFromJSON,
    HealthpatientCreateResponseToJSON,
    HealthpatientGetResponseFromJSON,
    HealthpatientGetResponseToJSON,
    HealthpatientListResponseFromJSON,
    HealthpatientListResponseToJSON,
    HealthpatientUpdateResponseFromJSON,
    HealthpatientUpdateResponseToJSON,
    PatientServiceUpdateRequestFromJSON,
    PatientServiceUpdateRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface PatientServiceCreateRequest {
    body: HealthpatientCreateRequest;
}

export interface PatientServiceDeleteRequest {
    id: number;
}

export interface PatientServiceGetRequest {
    id: number;
}

export interface PatientServiceListRequest {
    paginatePage?: number;
    paginatePerPage?: number;
}

export interface PatientServiceUpdateOperationRequest {
    id: number;
    body: PatientServiceUpdateRequest;
}

/**
 * 
 */
export class PatientServiceApi extends runtime.BaseAPI {

    /**
     */
    async patientServiceCreateRaw(requestParameters: PatientServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthpatientCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patientServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health.patient.PatientService/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HealthpatientCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthpatientCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async patientServiceCreate(requestParameters: PatientServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthpatientCreateResponse> {
        const response = await this.patientServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patientServiceDeleteRaw(requestParameters: PatientServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patientServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.patient.PatientService/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async patientServiceDelete(requestParameters: PatientServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.patientServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patientServiceGetRaw(requestParameters: PatientServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthpatientGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patientServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.patient.PatientService/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthpatientGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async patientServiceGet(requestParameters: PatientServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthpatientGetResponse> {
        const response = await this.patientServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patientServiceListRaw(requestParameters: PatientServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthpatientListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.paginatePage !== undefined) {
            queryParameters['paginate.page'] = requestParameters.paginatePage;
        }

        if (requestParameters.paginatePerPage !== undefined) {
            queryParameters['paginate.perPage'] = requestParameters.paginatePerPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health.patient.PatientService/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthpatientListResponseFromJSON(jsonValue));
    }

    /**
     */
    async patientServiceList(requestParameters: PatientServiceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthpatientListResponse> {
        const response = await this.patientServiceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patientServiceUpdateRaw(requestParameters: PatientServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthpatientUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patientServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patientServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/health.patient.PatientService/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PatientServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthpatientUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async patientServiceUpdate(requestParameters: PatientServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthpatientUpdateResponse> {
        const response = await this.patientServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
