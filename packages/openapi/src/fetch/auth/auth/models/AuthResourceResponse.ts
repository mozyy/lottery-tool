/* tslint:disable */
/* eslint-disable */
/**
 * auth/auth.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuthResourceResponse
 */
export interface AuthResourceResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResourceResponse
     */
    ownerId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResourceResponse
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResourceResponse
     */
    scope?: string;
    /**
     * 
     * @type {Date}
     * @memberof AuthResourceResponse
     */
    until?: Date;
}

/**
 * Check if a given object implements the AuthResourceResponse interface.
 */
export function instanceOfAuthResourceResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthResourceResponseFromJSON(json: any): AuthResourceResponse {
    return AuthResourceResponseFromJSONTyped(json, false);
}

export function AuthResourceResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthResourceResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'clientId': !exists(json, 'clientId') ? undefined : json['clientId'],
        'scope': !exists(json, 'scope') ? undefined : json['scope'],
        'until': !exists(json, 'until') ? undefined : (new Date(json['until'])),
    };
}

export function AuthResourceResponseToJSON(value?: AuthResourceResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ownerId': value.ownerId,
        'clientId': value.clientId,
        'scope': value.scope,
        'until': value.until === undefined ? undefined : (value.until.toISOString()),
    };
}

