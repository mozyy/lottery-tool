/* tslint:disable */
/* eslint-disable */
/**
 * blog/blog.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlogServiceUpdateRequest,
  BlogblogCreateRequest,
  BlogblogCreateResponse,
  BlogblogGetResponse,
  BlogblogListResponse,
  BlogblogUpdateResponse,
  RpcStatus,
} from '../models';
import {
    BlogServiceUpdateRequestFromJSON,
    BlogServiceUpdateRequestToJSON,
    BlogblogCreateRequestFromJSON,
    BlogblogCreateRequestToJSON,
    BlogblogCreateResponseFromJSON,
    BlogblogCreateResponseToJSON,
    BlogblogGetResponseFromJSON,
    BlogblogGetResponseToJSON,
    BlogblogListResponseFromJSON,
    BlogblogListResponseToJSON,
    BlogblogUpdateResponseFromJSON,
    BlogblogUpdateResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface BlogServiceCreateRequest {
    body: BlogblogCreateRequest;
}

export interface BlogServiceDeleteRequest {
    id: number;
}

export interface BlogServiceGetRequest {
    id: number;
}

export interface BlogServiceListRequest {
    paginatePage?: number;
    paginatePerPage?: number;
}

export interface BlogServiceUpdateOperationRequest {
    id: number;
    body: BlogServiceUpdateRequest;
}

/**
 * 
 */
export class BlogServiceApi extends runtime.BaseAPI {

    /**
     */
    async blogServiceCreateRaw(requestParameters: BlogServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogblogCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling blogServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/blog.blog.BlogService/blogs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlogblogCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogblogCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async blogServiceCreate(requestParameters: BlogServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogblogCreateResponse> {
        const response = await this.blogServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async blogServiceDeleteRaw(requestParameters: BlogServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling blogServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blog.blog.BlogService/blogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async blogServiceDelete(requestParameters: BlogServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blogServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async blogServiceGetRaw(requestParameters: BlogServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogblogGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling blogServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blog.blog.BlogService/blogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogblogGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async blogServiceGet(requestParameters: BlogServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogblogGetResponse> {
        const response = await this.blogServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async blogServiceListRaw(requestParameters: BlogServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogblogListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.paginatePage !== undefined) {
            queryParameters['paginate.page'] = requestParameters.paginatePage;
        }

        if (requestParameters.paginatePerPage !== undefined) {
            queryParameters['paginate.perPage'] = requestParameters.paginatePerPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blog.blog.BlogService/blogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogblogListResponseFromJSON(jsonValue));
    }

    /**
     */
    async blogServiceList(requestParameters: BlogServiceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogblogListResponse> {
        const response = await this.blogServiceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async blogServiceUpdateRaw(requestParameters: BlogServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogblogUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling blogServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling blogServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/blog.blog.BlogService/blogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlogServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogblogUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async blogServiceUpdate(requestParameters: BlogServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogblogUpdateResponse> {
        const response = await this.blogServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
