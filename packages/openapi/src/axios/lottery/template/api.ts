/* tslint:disable */
/* eslint-disable */
/**
 * lottery/template.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface LotteryItem
 */
export interface LotteryItem {
    /**
     * 
     * @type {number}
     * @memberof LotteryItem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LotteryItem
     */
    'lotteryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LotteryItem
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof LotteryItem
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof LotteryItem
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof LotteryItem
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface LotteryLottery
 */
export interface LotteryLottery {
    /**
     * 
     * @type {LotteryLotteryInfo}
     * @memberof LotteryLottery
     */
    'lottery'?: LotteryLotteryInfo;
    /**
     * 
     * @type {Array<LotteryItem>}
     * @memberof LotteryLottery
     */
    'items'?: Array<LotteryItem>;
    /**
     * 
     * @type {Array<LotteryRemark>}
     * @memberof LotteryLottery
     */
    'remarks'?: Array<LotteryRemark>;
}
/**
 * 
 * @export
 * @interface LotteryLotteryInfo
 */
export interface LotteryLotteryInfo {
    /**
     * 
     * @type {number}
     * @memberof LotteryLotteryInfo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LotteryLotteryInfo
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof LotteryLotteryInfo
     */
    'title'?: string;
    /**
     * 
     * @type {LotterylotteryType}
     * @memberof LotteryLotteryInfo
     */
    'type'?: LotterylotteryType;
    /**
     * 
     * @type {boolean}
     * @memberof LotteryLotteryInfo
     */
    'remark'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LotteryLotteryInfo
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof LotteryLotteryInfo
     */
    'updatedAt'?: string;
}


/**
 * 
 * @export
 * @interface LotteryRemark
 */
export interface LotteryRemark {
    /**
     * 
     * @type {number}
     * @memberof LotteryRemark
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LotteryRemark
     */
    'lotteryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LotteryRemark
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LotteryRemark
     */
    'require'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LotteryRemark
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof LotteryRemark
     */
    'updatedAt'?: string;
}
/**
 * - NUMBER: 个数  - PERCENT: 几率
 * @export
 * @enum {string}
 */

export const LotterylotteryType = {
    Number: 'NUMBER',
    Percent: 'PERCENT'
} as const;

export type LotterylotteryType = typeof LotterylotteryType[keyof typeof LotterylotteryType];


/**
 * 
 * @export
 * @interface LotterytemplateCreateRequest
 */
export interface LotterytemplateCreateRequest {
    /**
     * 
     * @type {TemplateNewTemplate}
     * @memberof LotterytemplateCreateRequest
     */
    'template'?: TemplateNewTemplate;
}
/**
 * 
 * @export
 * @interface LotterytemplateCreateResponse
 */
export interface LotterytemplateCreateResponse {
    /**
     * 
     * @type {TemplateTemplateWithLottery}
     * @memberof LotterytemplateCreateResponse
     */
    'template'?: TemplateTemplateWithLottery;
}
/**
 * 
 * @export
 * @interface LotterytemplateGetResponse
 */
export interface LotterytemplateGetResponse {
    /**
     * 
     * @type {TemplateTemplateWithLottery}
     * @memberof LotterytemplateGetResponse
     */
    'template'?: TemplateTemplateWithLottery;
}
/**
 * 
 * @export
 * @interface LotterytemplateListResponse
 */
export interface LotterytemplateListResponse {
    /**
     * 
     * @type {Array<TemplateTemplateWithLottery>}
     * @memberof LotterytemplateListResponse
     */
    'templates'?: Array<TemplateTemplateWithLottery>;
    /**
     * 
     * @type {PaginatePaginated}
     * @memberof LotterytemplateListResponse
     */
    'paginated'?: PaginatePaginated;
}
/**
 * 
 * @export
 * @interface LotterytemplateUpdateResponse
 */
export interface LotterytemplateUpdateResponse {
    /**
     * 
     * @type {TemplateTemplateWithLottery}
     * @memberof LotterytemplateUpdateResponse
     */
    'template'?: TemplateTemplateWithLottery;
}
/**
 * 
 * @export
 * @interface PaginatePaginate
 */
export interface PaginatePaginate {
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginate
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginate
     */
    'perPage'?: number;
}
/**
 * 
 * @export
 * @interface PaginatePaginated
 */
export interface PaginatePaginated {
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'perPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface TemplateNewTemplate
 */
export interface TemplateNewTemplate {
    /**
     * 
     * @type {number}
     * @memberof TemplateNewTemplate
     */
    'lotteryId'?: number;
}
/**
 * 
 * @export
 * @interface TemplateServiceUpdateRequest
 */
export interface TemplateServiceUpdateRequest {
    /**
     * 
     * @type {TemplateNewTemplate}
     * @memberof TemplateServiceUpdateRequest
     */
    'template'?: TemplateNewTemplate;
}
/**
 * 
 * @export
 * @interface TemplateTemplate
 */
export interface TemplateTemplate {
    /**
     * 
     * @type {number}
     * @memberof TemplateTemplate
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TemplateTemplate
     */
    'lotteryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplate
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplate
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface TemplateTemplateWithLottery
 */
export interface TemplateTemplateWithLottery {
    /**
     * 
     * @type {TemplateTemplate}
     * @memberof TemplateTemplateWithLottery
     */
    'template'?: TemplateTemplate;
    /**
     * 
     * @type {LotteryLottery}
     * @memberof TemplateTemplateWithLottery
     */
    'lottery'?: LotteryLottery;
}

/**
 * TemplateServiceApi - axios parameter creator
 * @export
 */
export const TemplateServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LotterytemplateCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateServiceCreate: async (body: LotterytemplateCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('templateServiceCreate', 'body', body)
            const localVarPath = `/lottery.template.TemplateService/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateServiceDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('templateServiceDelete', 'id', id)
            const localVarPath = `/lottery.template.TemplateService/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateServiceGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('templateServiceGet', 'id', id)
            const localVarPath = `/lottery.template.TemplateService/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [paginatePage] 
         * @param {number} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateServiceList: async (paginatePage?: number, paginatePerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lottery.template.TemplateService/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginatePage !== undefined) {
                localVarQueryParameter['paginate.page'] = paginatePage;
            }

            if (paginatePerPage !== undefined) {
                localVarQueryParameter['paginate.perPage'] = paginatePerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TemplateServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateServiceUpdate: async (id: number, body: TemplateServiceUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('templateServiceUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('templateServiceUpdate', 'body', body)
            const localVarPath = `/lottery.template.TemplateService/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateServiceApi - functional programming interface
 * @export
 */
export const TemplateServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplateServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LotterytemplateCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateServiceCreate(body: LotterytemplateCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LotterytemplateCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateServiceCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateServiceDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateServiceDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateServiceGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LotterytemplateGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateServiceGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [paginatePage] 
         * @param {number} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateServiceList(paginatePage?: number, paginatePerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LotterytemplateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateServiceList(paginatePage, paginatePerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TemplateServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateServiceUpdate(id: number, body: TemplateServiceUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LotterytemplateUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateServiceUpdate(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplateServiceApi - factory interface
 * @export
 */
export const TemplateServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplateServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {LotterytemplateCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateServiceCreate(body: LotterytemplateCreateRequest, options?: any): AxiosPromise<LotterytemplateCreateResponse> {
            return localVarFp.templateServiceCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateServiceDelete(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.templateServiceDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateServiceGet(id: number, options?: any): AxiosPromise<LotterytemplateGetResponse> {
            return localVarFp.templateServiceGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [paginatePage] 
         * @param {number} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateServiceList(paginatePage?: number, paginatePerPage?: number, options?: any): AxiosPromise<LotterytemplateListResponse> {
            return localVarFp.templateServiceList(paginatePage, paginatePerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TemplateServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateServiceUpdate(id: number, body: TemplateServiceUpdateRequest, options?: any): AxiosPromise<LotterytemplateUpdateResponse> {
            return localVarFp.templateServiceUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemplateServiceApi - object-oriented interface
 * @export
 * @class TemplateServiceApi
 * @extends {BaseAPI}
 */
export class TemplateServiceApi extends BaseAPI {
    /**
     * 
     * @param {LotterytemplateCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateServiceApi
     */
    public templateServiceCreate(body: LotterytemplateCreateRequest, options?: AxiosRequestConfig) {
        return TemplateServiceApiFp(this.configuration).templateServiceCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateServiceApi
     */
    public templateServiceDelete(id: number, options?: AxiosRequestConfig) {
        return TemplateServiceApiFp(this.configuration).templateServiceDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateServiceApi
     */
    public templateServiceGet(id: number, options?: AxiosRequestConfig) {
        return TemplateServiceApiFp(this.configuration).templateServiceGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [paginatePage] 
     * @param {number} [paginatePerPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateServiceApi
     */
    public templateServiceList(paginatePage?: number, paginatePerPage?: number, options?: AxiosRequestConfig) {
        return TemplateServiceApiFp(this.configuration).templateServiceList(paginatePage, paginatePerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TemplateServiceUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateServiceApi
     */
    public templateServiceUpdate(id: number, body: TemplateServiceUpdateRequest, options?: AxiosRequestConfig) {
        return TemplateServiceApiFp(this.configuration).templateServiceUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}


