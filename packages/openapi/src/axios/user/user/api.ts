/* tslint:disable */
/* eslint-disable */
/**
 * user/user.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthToken
 */
export interface AuthToken {
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    'tokenType'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthToken
     */
    'expiresIn'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface UserLoginMobileRequest
 */
export interface UserLoginMobileRequest {
    /**
     * 
     * @type {string}
     * @memberof UserLoginMobileRequest
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginMobileRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UserLoginWeixinRequest
 */
export interface UserLoginWeixinRequest {
    /**
     * 
     * @type {string}
     * @memberof UserLoginWeixinRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface UserRegisterMobileRequest
 */
export interface UserRegisterMobileRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRegisterMobileRequest
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterMobileRequest
     */
    'password'?: string;
}

/**
 * UserServiceApi - axios parameter creator
 * @export
 */
export const UserServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserLoginMobileRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceLoginMobile: async (body: UserLoginMobileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceLoginMobile', 'body', body)
            const localVarPath = `/user.user.UserService/loginMobile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLoginWeixinRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceLoginWeixin: async (body: UserLoginWeixinRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceLoginWeixin', 'body', body)
            const localVarPath = `/user.user.UserService/loginWeixin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRegisterMobileRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceRegisterMobile: async (body: UserRegisterMobileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceRegisterMobile', 'body', body)
            const localVarPath = `/user.user.UserService/registerMobile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserServiceApi - functional programming interface
 * @export
 */
export const UserServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserLoginMobileRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceLoginMobile(body: UserLoginMobileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceLoginMobile(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserLoginWeixinRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceLoginWeixin(body: UserLoginWeixinRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceLoginWeixin(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserRegisterMobileRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceRegisterMobile(body: UserRegisterMobileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceRegisterMobile(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserServiceApi - factory interface
 * @export
 */
export const UserServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {UserLoginMobileRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceLoginMobile(body: UserLoginMobileRequest, options?: any): AxiosPromise<AuthToken> {
            return localVarFp.userServiceLoginMobile(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLoginWeixinRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceLoginWeixin(body: UserLoginWeixinRequest, options?: any): AxiosPromise<AuthToken> {
            return localVarFp.userServiceLoginWeixin(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserRegisterMobileRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceRegisterMobile(body: UserRegisterMobileRequest, options?: any): AxiosPromise<AuthToken> {
            return localVarFp.userServiceRegisterMobile(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserServiceApi - object-oriented interface
 * @export
 * @class UserServiceApi
 * @extends {BaseAPI}
 */
export class UserServiceApi extends BaseAPI {
    /**
     * 
     * @param {UserLoginMobileRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceLoginMobile(body: UserLoginMobileRequest, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceLoginMobile(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLoginWeixinRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceLoginWeixin(body: UserLoginWeixinRequest, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceLoginWeixin(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserRegisterMobileRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceRegisterMobile(body: UserRegisterMobileRequest, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceRegisterMobile(body, options).then((request) => request(this.axios, this.basePath));
    }
}


