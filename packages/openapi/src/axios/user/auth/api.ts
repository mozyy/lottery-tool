/* tslint:disable */
/* eslint-disable */
/**
 * user/auth.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthAuthorizeResponse
 */
export interface AuthAuthorizeResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthorizeResponse
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthorizeResponse
     */
    'redirectUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthorizeResponse
     */
    'state'?: string;
}
/**
 * 
 * @export
 * @interface AuthClient
 */
export interface AuthClient {
    /**
     * 
     * @type {string}
     * @memberof AuthClient
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthClient
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthClient
     */
    'redirectUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthClient
     */
    'defaultScope'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthClient
     */
    'defaultExpiresIn'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthClient
     */
    'passdata'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthClient
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthClient
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface AuthClientCreateResponse
 */
export interface AuthClientCreateResponse {
    /**
     * 
     * @type {AuthClient}
     * @memberof AuthClientCreateResponse
     */
    'client'?: AuthClient;
}
/**
 * 
 * @export
 * @interface AuthClientListResponse
 */
export interface AuthClientListResponse {
    /**
     * 
     * @type {Array<AuthClient>}
     * @memberof AuthClientListResponse
     */
    'clients'?: Array<AuthClient>;
    /**
     * 
     * @type {PaginatePaginated}
     * @memberof AuthClientListResponse
     */
    'paginated'?: PaginatePaginated;
}
/**
 * 
 * @export
 * @interface AuthConfig
 */
export interface AuthConfig {
    /**
     * 
     * @type {number}
     * @memberof AuthConfig
     */
    'id'?: number;
    /**
     * 
     * @type {AuthPattern}
     * @memberof AuthConfig
     */
    'pattern'?: AuthPattern;
    /**
     * 
     * @type {string}
     * @memberof AuthConfig
     */
    'scope'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthConfig
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthConfig
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface AuthConfigCreateResponse
 */
export interface AuthConfigCreateResponse {
    /**
     * 
     * @type {AuthConfig}
     * @memberof AuthConfigCreateResponse
     */
    'config'?: AuthConfig;
}
/**
 * 
 * @export
 * @interface AuthConfigListResponse
 */
export interface AuthConfigListResponse {
    /**
     * 
     * @type {Array<AuthConfig>}
     * @memberof AuthConfigListResponse
     */
    'configs'?: Array<AuthConfig>;
}
/**
 * 
 * @export
 * @interface AuthNewClient
 */
export interface AuthNewClient {
    /**
     * 
     * @type {string}
     * @memberof AuthNewClient
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthNewClient
     */
    'redirectUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthNewClient
     */
    'defaultScope'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthNewClient
     */
    'defaultExpiresIn'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthNewClient
     */
    'passdata'?: string;
}
/**
 * 
 * @export
 * @interface AuthNewConfig
 */
export interface AuthNewConfig {
    /**
     * 
     * @type {AuthPattern}
     * @memberof AuthNewConfig
     */
    'pattern'?: AuthPattern;
    /**
     * 
     * @type {string}
     * @memberof AuthNewConfig
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface AuthPattern
 */
export interface AuthPattern {
    /**
     * 
     * @type {string}
     * @memberof AuthPattern
     */
    'equal'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthPattern
     */
    'prefix'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthPattern
     */
    'regex'?: string;
}
/**
 * 
 * @export
 * @interface AuthRefreshRequest
 */
export interface AuthRefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthRefreshRequest
     */
    'grantType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRefreshRequest
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface AuthToken
 */
export interface AuthToken {
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    'tokenType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    'expiresIn'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface AuthTokenRequest
 */
export interface AuthTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthTokenRequest
     */
    'grantType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthTokenRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthTokenRequest
     */
    'redirectUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthTokenRequest
     */
    'clientId'?: string;
}
/**
 * 
 * @export
 * @interface PaginatePaginate
 */
export interface PaginatePaginate {
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginate
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginate
     */
    'perPage'?: number;
}
/**
 * 
 * @export
 * @interface PaginatePaginated
 */
export interface PaginatePaginated {
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'perPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}

/**
 * AuthServiceApi - axios parameter creator
 * @export
 */
export const AuthServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [responseType] 表示授权类型，必选项，此处的值固定为\&quot;code\&quot;
         * @param {string} [clientId] 表示客户端的ID，必选项
         * @param {string} [redirectUri] 表示重定向URI，可选项
         * @param {string} [scope] 表示申请的权限范围，可选项
         * @param {string} [state] 表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authServiceAuthorize: async (responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user.auth.AuthService/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (responseType !== undefined) {
                localVarQueryParameter['responseType'] = responseType;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authServiceGetToken: async (body: AuthTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authServiceGetToken', 'body', body)
            const localVarPath = `/user.auth.AuthService/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthRefreshRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authServiceRefresh: async (body: AuthRefreshRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authServiceRefresh', 'body', body)
            const localVarPath = `/user.auth.AuthService/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthServiceApi - functional programming interface
 * @export
 */
export const AuthServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [responseType] 表示授权类型，必选项，此处的值固定为\&quot;code\&quot;
         * @param {string} [clientId] 表示客户端的ID，必选项
         * @param {string} [redirectUri] 表示重定向URI，可选项
         * @param {string} [scope] 表示申请的权限范围，可选项
         * @param {string} [state] 表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authServiceAuthorize(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAuthorizeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authServiceAuthorize(responseType, clientId, redirectUri, scope, state, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authServiceGetToken(body: AuthTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authServiceGetToken(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthRefreshRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authServiceRefresh(body: AuthRefreshRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authServiceRefresh(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthServiceApi - factory interface
 * @export
 */
export const AuthServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [responseType] 表示授权类型，必选项，此处的值固定为\&quot;code\&quot;
         * @param {string} [clientId] 表示客户端的ID，必选项
         * @param {string} [redirectUri] 表示重定向URI，可选项
         * @param {string} [scope] 表示申请的权限范围，可选项
         * @param {string} [state] 表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authServiceAuthorize(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, options?: any): AxiosPromise<AuthAuthorizeResponse> {
            return localVarFp.authServiceAuthorize(responseType, clientId, redirectUri, scope, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authServiceGetToken(body: AuthTokenRequest, options?: any): AxiosPromise<AuthToken> {
            return localVarFp.authServiceGetToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthRefreshRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authServiceRefresh(body: AuthRefreshRequest, options?: any): AxiosPromise<AuthToken> {
            return localVarFp.authServiceRefresh(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthServiceApi - object-oriented interface
 * @export
 * @class AuthServiceApi
 * @extends {BaseAPI}
 */
export class AuthServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} [responseType] 表示授权类型，必选项，此处的值固定为\&quot;code\&quot;
     * @param {string} [clientId] 表示客户端的ID，必选项
     * @param {string} [redirectUri] 表示重定向URI，可选项
     * @param {string} [scope] 表示申请的权限范围，可选项
     * @param {string} [state] 表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public authServiceAuthorize(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, options?: AxiosRequestConfig) {
        return AuthServiceApiFp(this.configuration).authServiceAuthorize(responseType, clientId, redirectUri, scope, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthTokenRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public authServiceGetToken(body: AuthTokenRequest, options?: AxiosRequestConfig) {
        return AuthServiceApiFp(this.configuration).authServiceGetToken(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthRefreshRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public authServiceRefresh(body: AuthRefreshRequest, options?: AxiosRequestConfig) {
        return AuthServiceApiFp(this.configuration).authServiceRefresh(body, options).then((request) => request(this.axios, this.basePath));
    }
}


