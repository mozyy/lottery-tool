/* tslint:disable */
/* eslint-disable */
/**
 * oss/oss.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const OssBucketName = {
    Image: 'IMAGE',
    Static: 'STATIC'
} as const;

export type OssBucketName = typeof OssBucketName[keyof typeof OssBucketName];


/**
 * 
 * @export
 * @interface OssNewOss
 */
export interface OssNewOss {
    /**
     * 
     * @type {OssBucketName}
     * @memberof OssNewOss
     */
    'bucketName'?: OssBucketName;
    /**
     * 
     * @type {string}
     * @memberof OssNewOss
     */
    'objectKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof OssNewOss
     */
    'name'?: string;
}


/**
 * 
 * @export
 * @interface OssOss
 */
export interface OssOss {
    /**
     * 
     * @type {number}
     * @memberof OssOss
     */
    'id'?: number;
    /**
     * 
     * @type {OssBucketName}
     * @memberof OssOss
     */
    'bucketName'?: OssBucketName;
    /**
     * 
     * @type {string}
     * @memberof OssOss
     */
    'objectKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof OssOss
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OssOss
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OssOss
     */
    'updatedAt'?: string;
}


/**
 * 
 * @export
 * @interface OssServiceUpdateRequest
 */
export interface OssServiceUpdateRequest {
    /**
     * 
     * @type {OssNewOss}
     * @memberof OssServiceUpdateRequest
     */
    'oss'?: OssNewOss;
}
/**
 * 
 * @export
 * @interface OssossCreateRequest
 */
export interface OssossCreateRequest {
    /**
     * 
     * @type {OssNewOss}
     * @memberof OssossCreateRequest
     */
    'oss'?: OssNewOss;
}
/**
 * 
 * @export
 * @interface OssossCreateResponse
 */
export interface OssossCreateResponse {
    /**
     * 
     * @type {OssOss}
     * @memberof OssossCreateResponse
     */
    'oss'?: OssOss;
}
/**
 * 
 * @export
 * @interface OssossGetResponse
 */
export interface OssossGetResponse {
    /**
     * 
     * @type {OssOss}
     * @memberof OssossGetResponse
     */
    'oss'?: OssOss;
}
/**
 * 
 * @export
 * @interface OssossListResponse
 */
export interface OssossListResponse {
    /**
     * 
     * @type {Array<OssOss>}
     * @memberof OssossListResponse
     */
    'oss'?: Array<OssOss>;
    /**
     * 
     * @type {PaginatePaginated}
     * @memberof OssossListResponse
     */
    'paginated'?: PaginatePaginated;
}
/**
 * 
 * @export
 * @interface OssossUpdateResponse
 */
export interface OssossUpdateResponse {
    /**
     * 
     * @type {OssOss}
     * @memberof OssossUpdateResponse
     */
    'oss'?: OssOss;
}
/**
 * 
 * @export
 * @interface PaginatePaginate
 */
export interface PaginatePaginate {
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginate
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginate
     */
    'perPage'?: number;
}
/**
 * 
 * @export
 * @interface PaginatePaginated
 */
export interface PaginatePaginated {
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'perPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}

/**
 * OssServiceApi - axios parameter creator
 * @export
 */
export const OssServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {OssossCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ossServiceCreate: async (body: OssossCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ossServiceCreate', 'body', body)
            const localVarPath = `/oss.oss.OssService/oss`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ossServiceDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ossServiceDelete', 'id', id)
            const localVarPath = `/oss.oss.OssService/oss/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ossServiceGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ossServiceGet', 'id', id)
            const localVarPath = `/oss.oss.OssService/oss/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [ids] 
         * @param {number} [paginatePage] 
         * @param {number} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ossServiceList: async (ids?: Array<number>, paginatePage?: number, paginatePerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oss.oss.OssService/oss`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (paginatePage !== undefined) {
                localVarQueryParameter['paginate.page'] = paginatePage;
            }

            if (paginatePerPage !== undefined) {
                localVarQueryParameter['paginate.perPage'] = paginatePerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {OssServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ossServiceUpdate: async (id: number, body: OssServiceUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ossServiceUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ossServiceUpdate', 'body', body)
            const localVarPath = `/oss.oss.OssService/oss/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OssServiceApi - functional programming interface
 * @export
 */
export const OssServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OssServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {OssossCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ossServiceCreate(body: OssossCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OssossCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ossServiceCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ossServiceDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ossServiceDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ossServiceGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OssossGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ossServiceGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<number>} [ids] 
         * @param {number} [paginatePage] 
         * @param {number} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ossServiceList(ids?: Array<number>, paginatePage?: number, paginatePerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OssossListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ossServiceList(ids, paginatePage, paginatePerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {OssServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ossServiceUpdate(id: number, body: OssServiceUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OssossUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ossServiceUpdate(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OssServiceApi - factory interface
 * @export
 */
export const OssServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OssServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {OssossCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ossServiceCreate(body: OssossCreateRequest, options?: any): AxiosPromise<OssossCreateResponse> {
            return localVarFp.ossServiceCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ossServiceDelete(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.ossServiceDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ossServiceGet(id: number, options?: any): AxiosPromise<OssossGetResponse> {
            return localVarFp.ossServiceGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [ids] 
         * @param {number} [paginatePage] 
         * @param {number} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ossServiceList(ids?: Array<number>, paginatePage?: number, paginatePerPage?: number, options?: any): AxiosPromise<OssossListResponse> {
            return localVarFp.ossServiceList(ids, paginatePage, paginatePerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {OssServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ossServiceUpdate(id: number, body: OssServiceUpdateRequest, options?: any): AxiosPromise<OssossUpdateResponse> {
            return localVarFp.ossServiceUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OssServiceApi - object-oriented interface
 * @export
 * @class OssServiceApi
 * @extends {BaseAPI}
 */
export class OssServiceApi extends BaseAPI {
    /**
     * 
     * @param {OssossCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OssServiceApi
     */
    public ossServiceCreate(body: OssossCreateRequest, options?: AxiosRequestConfig) {
        return OssServiceApiFp(this.configuration).ossServiceCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OssServiceApi
     */
    public ossServiceDelete(id: number, options?: AxiosRequestConfig) {
        return OssServiceApiFp(this.configuration).ossServiceDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OssServiceApi
     */
    public ossServiceGet(id: number, options?: AxiosRequestConfig) {
        return OssServiceApiFp(this.configuration).ossServiceGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [ids] 
     * @param {number} [paginatePage] 
     * @param {number} [paginatePerPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OssServiceApi
     */
    public ossServiceList(ids?: Array<number>, paginatePage?: number, paginatePerPage?: number, options?: AxiosRequestConfig) {
        return OssServiceApiFp(this.configuration).ossServiceList(ids, paginatePage, paginatePerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {OssServiceUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OssServiceApi
     */
    public ossServiceUpdate(id: number, body: OssServiceUpdateRequest, options?: AxiosRequestConfig) {
        return OssServiceApiFp(this.configuration).ossServiceUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}


