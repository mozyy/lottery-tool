/* tslint:disable */
/* eslint-disable */
/**
 * health/department.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DepartmentHepartment
 */
export interface DepartmentHepartment {
    /**
     * 
     * @type {number}
     * @memberof DepartmentHepartment
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DepartmentHepartment
     */
    'hospitalId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DepartmentHepartment
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentHepartment
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentHepartment
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface DepartmentNewHepartment
 */
export interface DepartmentNewHepartment {
    /**
     * 
     * @type {number}
     * @memberof DepartmentNewHepartment
     */
    'hospitalId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DepartmentNewHepartment
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface HealthdepartmentCreateRequest
 */
export interface HealthdepartmentCreateRequest {
    /**
     * 
     * @type {DepartmentNewHepartment}
     * @memberof HealthdepartmentCreateRequest
     */
    'department'?: DepartmentNewHepartment;
}
/**
 * 
 * @export
 * @interface HealthdepartmentCreateResponse
 */
export interface HealthdepartmentCreateResponse {
    /**
     * 
     * @type {DepartmentHepartment}
     * @memberof HealthdepartmentCreateResponse
     */
    'department'?: DepartmentHepartment;
}
/**
 * 
 * @export
 * @interface HealthdepartmentGetResponse
 */
export interface HealthdepartmentGetResponse {
    /**
     * 
     * @type {DepartmentHepartment}
     * @memberof HealthdepartmentGetResponse
     */
    'department'?: DepartmentHepartment;
    /**
     * 
     * @type {HospitalHospital}
     * @memberof HealthdepartmentGetResponse
     */
    'hospital'?: HospitalHospital;
}
/**
 * 
 * @export
 * @interface HealthdepartmentListResponse
 */
export interface HealthdepartmentListResponse {
    /**
     * 
     * @type {Array<DepartmentHepartment>}
     * @memberof HealthdepartmentListResponse
     */
    'department'?: Array<DepartmentHepartment>;
    /**
     * 
     * @type {PaginatePaginated}
     * @memberof HealthdepartmentListResponse
     */
    'paginated'?: PaginatePaginated;
}
/**
 * 
 * @export
 * @interface HealthdepartmentUpdateResponse
 */
export interface HealthdepartmentUpdateResponse {
    /**
     * 
     * @type {DepartmentHepartment}
     * @memberof HealthdepartmentUpdateResponse
     */
    'department'?: DepartmentHepartment;
}
/**
 * 
 * @export
 * @interface HepartmentServiceUpdateRequest
 */
export interface HepartmentServiceUpdateRequest {
    /**
     * 
     * @type {DepartmentNewHepartment}
     * @memberof HepartmentServiceUpdateRequest
     */
    'department'?: DepartmentNewHepartment;
}
/**
 * 
 * @export
 * @interface HospitalHospital
 */
export interface HospitalHospital {
    /**
     * 
     * @type {number}
     * @memberof HospitalHospital
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HospitalHospital
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalHospital
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalHospital
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalHospital
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalHospital
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface PaginatePaginate
 */
export interface PaginatePaginate {
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginate
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginate
     */
    'perPage'?: number;
}
/**
 * 
 * @export
 * @interface PaginatePaginated
 */
export interface PaginatePaginated {
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'perPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePaginated
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}

/**
 * HepartmentServiceApi - axios parameter creator
 * @export
 */
export const HepartmentServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {HealthdepartmentCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hepartmentServiceCreate: async (body: HealthdepartmentCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hepartmentServiceCreate', 'body', body)
            const localVarPath = `/health.department.HepartmentService/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hepartmentServiceDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('hepartmentServiceDelete', 'id', id)
            const localVarPath = `/health.department.HepartmentService/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hepartmentServiceGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('hepartmentServiceGet', 'id', id)
            const localVarPath = `/health.department.HepartmentService/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [paginatePage] 
         * @param {number} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hepartmentServiceList: async (paginatePage?: number, paginatePerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health.department.HepartmentService/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginatePage !== undefined) {
                localVarQueryParameter['paginate.page'] = paginatePage;
            }

            if (paginatePerPage !== undefined) {
                localVarQueryParameter['paginate.perPage'] = paginatePerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {HepartmentServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hepartmentServiceUpdate: async (id: number, body: HepartmentServiceUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('hepartmentServiceUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hepartmentServiceUpdate', 'body', body)
            const localVarPath = `/health.department.HepartmentService/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HepartmentServiceApi - functional programming interface
 * @export
 */
export const HepartmentServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HepartmentServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {HealthdepartmentCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hepartmentServiceCreate(body: HealthdepartmentCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthdepartmentCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hepartmentServiceCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hepartmentServiceDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hepartmentServiceDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hepartmentServiceGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthdepartmentGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hepartmentServiceGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [paginatePage] 
         * @param {number} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hepartmentServiceList(paginatePage?: number, paginatePerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthdepartmentListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hepartmentServiceList(paginatePage, paginatePerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {HepartmentServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hepartmentServiceUpdate(id: number, body: HepartmentServiceUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthdepartmentUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hepartmentServiceUpdate(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HepartmentServiceApi - factory interface
 * @export
 */
export const HepartmentServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HepartmentServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {HealthdepartmentCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hepartmentServiceCreate(body: HealthdepartmentCreateRequest, options?: any): AxiosPromise<HealthdepartmentCreateResponse> {
            return localVarFp.hepartmentServiceCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hepartmentServiceDelete(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.hepartmentServiceDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hepartmentServiceGet(id: number, options?: any): AxiosPromise<HealthdepartmentGetResponse> {
            return localVarFp.hepartmentServiceGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [paginatePage] 
         * @param {number} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hepartmentServiceList(paginatePage?: number, paginatePerPage?: number, options?: any): AxiosPromise<HealthdepartmentListResponse> {
            return localVarFp.hepartmentServiceList(paginatePage, paginatePerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {HepartmentServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hepartmentServiceUpdate(id: number, body: HepartmentServiceUpdateRequest, options?: any): AxiosPromise<HealthdepartmentUpdateResponse> {
            return localVarFp.hepartmentServiceUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HepartmentServiceApi - object-oriented interface
 * @export
 * @class HepartmentServiceApi
 * @extends {BaseAPI}
 */
export class HepartmentServiceApi extends BaseAPI {
    /**
     * 
     * @param {HealthdepartmentCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HepartmentServiceApi
     */
    public hepartmentServiceCreate(body: HealthdepartmentCreateRequest, options?: AxiosRequestConfig) {
        return HepartmentServiceApiFp(this.configuration).hepartmentServiceCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HepartmentServiceApi
     */
    public hepartmentServiceDelete(id: number, options?: AxiosRequestConfig) {
        return HepartmentServiceApiFp(this.configuration).hepartmentServiceDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HepartmentServiceApi
     */
    public hepartmentServiceGet(id: number, options?: AxiosRequestConfig) {
        return HepartmentServiceApiFp(this.configuration).hepartmentServiceGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [paginatePage] 
     * @param {number} [paginatePerPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HepartmentServiceApi
     */
    public hepartmentServiceList(paginatePage?: number, paginatePerPage?: number, options?: AxiosRequestConfig) {
        return HepartmentServiceApiFp(this.configuration).hepartmentServiceList(paginatePage, paginatePerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {HepartmentServiceUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HepartmentServiceApi
     */
    public hepartmentServiceUpdate(id: number, body: HepartmentServiceUpdateRequest, options?: AxiosRequestConfig) {
        return HepartmentServiceApiFp(this.configuration).hepartmentServiceUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}


