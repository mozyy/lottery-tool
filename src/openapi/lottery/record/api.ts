/* tslint:disable */
/* eslint-disable */
/**
 * record.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface PaginatePaginate
 */
export interface PaginatePaginate {
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginate
     */
    'page'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginate
     */
    'perPage'?: string;
}
/**
 * 
 * @export
 * @interface PaginatePaginated
 */
export interface PaginatePaginated {
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginated
     */
    'page'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginated
     */
    'perPage'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginated
     */
    'total'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginated
     */
    'totalPages'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RecordCreateRequest
 */
export interface RecordCreateRequest {
    /**
     * 
     * @type {RecordNewRecord}
     * @memberof RecordCreateRequest
     */
    'record'?: RecordNewRecord;
}
/**
 * 
 * @export
 * @interface RecordCreateResponse
 */
export interface RecordCreateResponse {
    /**
     * 
     * @type {RecordRecord}
     * @memberof RecordCreateResponse
     */
    'record'?: RecordRecord;
}
/**
 * 
 * @export
 * @interface RecordGetResponse
 */
export interface RecordGetResponse {
    /**
     * 
     * @type {RecordRecord}
     * @memberof RecordGetResponse
     */
    'record'?: RecordRecord;
}
/**
 * 
 * @export
 * @interface RecordListResponse
 */
export interface RecordListResponse {
    /**
     * 
     * @type {Array<RecordRecord>}
     * @memberof RecordListResponse
     */
    'records'?: Array<RecordRecord>;
    /**
     * 
     * @type {PaginatePaginated}
     * @memberof RecordListResponse
     */
    'paginated'?: PaginatePaginated;
}
/**
 * 
 * @export
 * @interface RecordNewRecord
 */
export interface RecordNewRecord {
    /**
     * 
     * @type {RecordNewRecordInfo}
     * @memberof RecordNewRecord
     */
    'record'?: RecordNewRecordInfo;
    /**
     * 
     * @type {Array<RecordNewRecordRemark>}
     * @memberof RecordNewRecord
     */
    'recordRemarks'?: Array<RecordNewRecordRemark>;
}
/**
 * 
 * @export
 * @interface RecordNewRecordInfo
 */
export interface RecordNewRecordInfo {
    /**
     * 
     * @type {number}
     * @memberof RecordNewRecordInfo
     */
    'lotteryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RecordNewRecordInfo
     */
    'userId'?: string;
    /**
     * 
     * @type {number}
     * @memberof RecordNewRecordInfo
     */
    'itemId'?: number;
}
/**
 * 
 * @export
 * @interface RecordNewRecordRemark
 */
export interface RecordNewRecordRemark {
    /**
     * 
     * @type {number}
     * @memberof RecordNewRecordRemark
     */
    'recordId'?: number;
    /**
     * 
     * @type {number}
     * @memberof RecordNewRecordRemark
     */
    'remarkId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RecordNewRecordRemark
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface RecordRecord
 */
export interface RecordRecord {
    /**
     * 
     * @type {RecordRecordInfo}
     * @memberof RecordRecord
     */
    'record'?: RecordRecordInfo;
    /**
     * 
     * @type {Array<RecordRecordRemark>}
     * @memberof RecordRecord
     */
    'recordRemarks'?: Array<RecordRecordRemark>;
}
/**
 * 
 * @export
 * @interface RecordRecordInfo
 */
export interface RecordRecordInfo {
    /**
     * 
     * @type {number}
     * @memberof RecordRecordInfo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RecordRecordInfo
     */
    'lotteryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RecordRecordInfo
     */
    'userId'?: string;
    /**
     * 
     * @type {number}
     * @memberof RecordRecordInfo
     */
    'itemId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RecordRecordInfo
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecordRecordInfo
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface RecordRecordQuery
 */
export interface RecordRecordQuery {
    /**
     * 
     * @type {number}
     * @memberof RecordRecordQuery
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RecordRecordQuery
     */
    'lotteryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RecordRecordQuery
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface RecordRecordRemark
 */
export interface RecordRecordRemark {
    /**
     * 
     * @type {number}
     * @memberof RecordRecordRemark
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RecordRecordRemark
     */
    'recordId'?: number;
    /**
     * 
     * @type {number}
     * @memberof RecordRecordRemark
     */
    'remarkId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RecordRecordRemark
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecordRecordRemark
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecordRecordRemark
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface RecordServiceUpdateRequest
 */
export interface RecordServiceUpdateRequest {
    /**
     * 
     * @type {RecordNewRecord}
     * @memberof RecordServiceUpdateRequest
     */
    'record'?: RecordNewRecord;
}
/**
 * 
 * @export
 * @interface RecordUpdateResponse
 */
export interface RecordUpdateResponse {
    /**
     * 
     * @type {RecordRecord}
     * @memberof RecordUpdateResponse
     */
    'record'?: RecordRecord;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}

/**
 * RecordServiceApi - axios parameter creator
 * @export
 */
export const RecordServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RecordCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordServiceCreate: async (body: RecordCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('recordServiceCreate', 'body', body)
            const localVarPath = `/record.RecordService/records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordServiceDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recordServiceDelete', 'id', id)
            const localVarPath = `/record.RecordService/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordServiceGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recordServiceGet', 'id', id)
            const localVarPath = `/record.RecordService/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [recordId] id
         * @param {number} [recordLotteryId] id
         * @param {string} [recordUserId] id
         * @param {string} [paginatePage] 
         * @param {string} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordServiceList: async (recordId?: number, recordLotteryId?: number, recordUserId?: string, paginatePage?: string, paginatePerPage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/record.RecordService/records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recordId !== undefined) {
                localVarQueryParameter['record.id'] = recordId;
            }

            if (recordLotteryId !== undefined) {
                localVarQueryParameter['record.lotteryId'] = recordLotteryId;
            }

            if (recordUserId !== undefined) {
                localVarQueryParameter['record.userId'] = recordUserId;
            }

            if (paginatePage !== undefined) {
                localVarQueryParameter['paginate.page'] = paginatePage;
            }

            if (paginatePerPage !== undefined) {
                localVarQueryParameter['paginate.perPage'] = paginatePerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordServiceUpdate: async (id: number, body: RecordServiceUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recordServiceUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('recordServiceUpdate', 'body', body)
            const localVarPath = `/record.RecordService/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecordServiceApi - functional programming interface
 * @export
 */
export const RecordServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecordServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RecordCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordServiceCreate(body: RecordCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordServiceCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordServiceDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordServiceDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordServiceGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordServiceGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [recordId] id
         * @param {number} [recordLotteryId] id
         * @param {string} [recordUserId] id
         * @param {string} [paginatePage] 
         * @param {string} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordServiceList(recordId?: number, recordLotteryId?: number, recordUserId?: string, paginatePage?: string, paginatePerPage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordServiceList(recordId, recordLotteryId, recordUserId, paginatePage, paginatePerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordServiceUpdate(id: number, body: RecordServiceUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordServiceUpdate(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecordServiceApi - factory interface
 * @export
 */
export const RecordServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecordServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {RecordCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordServiceCreate(body: RecordCreateRequest, options?: any): AxiosPromise<RecordCreateResponse> {
            return localVarFp.recordServiceCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordServiceDelete(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.recordServiceDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordServiceGet(id: number, options?: any): AxiosPromise<RecordGetResponse> {
            return localVarFp.recordServiceGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [recordId] id
         * @param {number} [recordLotteryId] id
         * @param {string} [recordUserId] id
         * @param {string} [paginatePage] 
         * @param {string} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordServiceList(recordId?: number, recordLotteryId?: number, recordUserId?: string, paginatePage?: string, paginatePerPage?: string, options?: any): AxiosPromise<RecordListResponse> {
            return localVarFp.recordServiceList(recordId, recordLotteryId, recordUserId, paginatePage, paginatePerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordServiceUpdate(id: number, body: RecordServiceUpdateRequest, options?: any): AxiosPromise<RecordUpdateResponse> {
            return localVarFp.recordServiceUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecordServiceApi - object-oriented interface
 * @export
 * @class RecordServiceApi
 * @extends {BaseAPI}
 */
export class RecordServiceApi extends BaseAPI {
    /**
     * 
     * @param {RecordCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordServiceApi
     */
    public recordServiceCreate(body: RecordCreateRequest, options?: AxiosRequestConfig) {
        return RecordServiceApiFp(this.configuration).recordServiceCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordServiceApi
     */
    public recordServiceDelete(id: number, options?: AxiosRequestConfig) {
        return RecordServiceApiFp(this.configuration).recordServiceDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordServiceApi
     */
    public recordServiceGet(id: number, options?: AxiosRequestConfig) {
        return RecordServiceApiFp(this.configuration).recordServiceGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [recordId] id
     * @param {number} [recordLotteryId] id
     * @param {string} [recordUserId] id
     * @param {string} [paginatePage] 
     * @param {string} [paginatePerPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordServiceApi
     */
    public recordServiceList(recordId?: number, recordLotteryId?: number, recordUserId?: string, paginatePage?: string, paginatePerPage?: string, options?: AxiosRequestConfig) {
        return RecordServiceApiFp(this.configuration).recordServiceList(recordId, recordLotteryId, recordUserId, paginatePage, paginatePerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RecordServiceUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordServiceApi
     */
    public recordServiceUpdate(id: number, body: RecordServiceUpdateRequest, options?: AxiosRequestConfig) {
        return RecordServiceApiFp(this.configuration).recordServiceUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}


