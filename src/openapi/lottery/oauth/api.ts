/* tslint:disable */
/* eslint-disable */
/**
 * oauth.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface OauthAuthorizeResponse
 */
export interface OauthAuthorizeResponse {
    /**
     * 
     * @type {string}
     * @memberof OauthAuthorizeResponse
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface OauthClient
 */
export interface OauthClient {
    /**
     * 
     * @type {string}
     * @memberof OauthClient
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthClient
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthClient
     */
    'redirectUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthClient
     */
    'defaultScope'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthClient
     */
    'passdata'?: string;
}
/**
 * 
 * @export
 * @interface OauthClientCreateResponse
 */
export interface OauthClientCreateResponse {
    /**
     * 
     * @type {OauthClient}
     * @memberof OauthClientCreateResponse
     */
    'client'?: OauthClient;
}
/**
 * 
 * @export
 * @interface OauthClientListResponse
 */
export interface OauthClientListResponse {
    /**
     * 
     * @type {Array<OauthClient>}
     * @memberof OauthClientListResponse
     */
    'clients'?: Array<OauthClient>;
}
/**
 * 
 * @export
 * @interface OauthConfig
 */
export interface OauthConfig {
    /**
     * 
     * @type {number}
     * @memberof OauthConfig
     */
    'id'?: number;
    /**
     * 
     * @type {OauthPattern}
     * @memberof OauthConfig
     */
    'pattern'?: OauthPattern;
    /**
     * 
     * @type {string}
     * @memberof OauthConfig
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface OauthConfigCreateResponse
 */
export interface OauthConfigCreateResponse {
    /**
     * 
     * @type {OauthConfig}
     * @memberof OauthConfigCreateResponse
     */
    'config'?: OauthConfig;
}
/**
 * 
 * @export
 * @interface OauthConfigListResponse
 */
export interface OauthConfigListResponse {
    /**
     * 
     * @type {Array<OauthConfig>}
     * @memberof OauthConfigListResponse
     */
    'configs'?: Array<OauthConfig>;
}
/**
 * 
 * @export
 * @interface OauthLoginResponse
 */
export interface OauthLoginResponse {
    /**
     * 
     * @type {OauthUser}
     * @memberof OauthLoginResponse
     */
    'user'?: OauthUser;
    /**
     * 
     * @type {OauthToken}
     * @memberof OauthLoginResponse
     */
    'token'?: OauthToken;
}
/**
 * 
 * @export
 * @interface OauthNewClient
 */
export interface OauthNewClient {
    /**
     * 
     * @type {string}
     * @memberof OauthNewClient
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthNewClient
     */
    'redirectUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthNewClient
     */
    'defaultScope'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthNewClient
     */
    'passdata'?: string;
}
/**
 * 
 * @export
 * @interface OauthNewConfig
 */
export interface OauthNewConfig {
    /**
     * 
     * @type {OauthPattern}
     * @memberof OauthNewConfig
     */
    'pattern'?: OauthPattern;
    /**
     * 
     * @type {string}
     * @memberof OauthNewConfig
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface OauthPattern
 */
export interface OauthPattern {
    /**
     * 
     * @type {string}
     * @memberof OauthPattern
     */
    'equal'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthPattern
     */
    'prefix'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthPattern
     */
    'regex'?: string;
}
/**
 * 
 * @export
 * @interface OauthRegisterResponse
 */
export interface OauthRegisterResponse {
    /**
     * 
     * @type {OauthUser}
     * @memberof OauthRegisterResponse
     */
    'user'?: OauthUser;
    /**
     * 
     * @type {OauthToken}
     * @memberof OauthRegisterResponse
     */
    'token'?: OauthToken;
}
/**
 * 
 * @export
 * @interface OauthResourceResponse
 */
export interface OauthResourceResponse {
    /**
     * 
     * @type {string}
     * @memberof OauthResourceResponse
     */
    'ownerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthResourceResponse
     */
    'clientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthResourceResponse
     */
    'scope'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthResourceResponse
     */
    'redirectUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthResourceResponse
     */
    'until'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof OauthResourceResponse
     */
    'extensions'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface OauthToken
 */
export interface OauthToken {
    /**
     * 
     * @type {string}
     * @memberof OauthToken
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthToken
     */
    'tokenType'?: string;
    /**
     * 
     * @type {number}
     * @memberof OauthToken
     */
    'expiresIn'?: number;
    /**
     * 
     * @type {string}
     * @memberof OauthToken
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthToken
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface OauthTokenRequest
 */
export interface OauthTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof OauthTokenRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface OauthTokenResponse
 */
export interface OauthTokenResponse {
    /**
     * 
     * @type {OauthToken}
     * @memberof OauthTokenResponse
     */
    'token'?: OauthToken;
}
/**
 * 
 * @export
 * @interface OauthUser
 */
export interface OauthUser {
    /**
     * 
     * @type {string}
     * @memberof OauthUser
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthUser
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OauthUser
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}

/**
 * OAuthServiceApi - axios parameter creator
 * @export
 */
export const OAuthServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [clientId] 
         * @param {string} [responseType] 
         * @param {string} [redirectUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthServiceAuthorize: async (clientId?: string, responseType?: string, redirectUri?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth.OAuthService/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (responseType !== undefined) {
                localVarQueryParameter['responseType'] = responseType;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OauthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthServiceToken: async (body: OauthTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('oAuthServiceToken', 'body', body)
            const localVarPath = `/oauth.OAuthService/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OAuthServiceApi - functional programming interface
 * @export
 */
export const OAuthServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OAuthServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [clientId] 
         * @param {string} [responseType] 
         * @param {string} [redirectUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oAuthServiceAuthorize(clientId?: string, responseType?: string, redirectUri?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthAuthorizeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oAuthServiceAuthorize(clientId, responseType, redirectUri, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OauthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oAuthServiceToken(body: OauthTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oAuthServiceToken(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OAuthServiceApi - factory interface
 * @export
 */
export const OAuthServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OAuthServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [clientId] 
         * @param {string} [responseType] 
         * @param {string} [redirectUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthServiceAuthorize(clientId?: string, responseType?: string, redirectUri?: string, options?: any): AxiosPromise<OauthAuthorizeResponse> {
            return localVarFp.oAuthServiceAuthorize(clientId, responseType, redirectUri, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OauthTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthServiceToken(body: OauthTokenRequest, options?: any): AxiosPromise<OauthTokenResponse> {
            return localVarFp.oAuthServiceToken(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OAuthServiceApi - object-oriented interface
 * @export
 * @class OAuthServiceApi
 * @extends {BaseAPI}
 */
export class OAuthServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} [clientId] 
     * @param {string} [responseType] 
     * @param {string} [redirectUri] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthServiceApi
     */
    public oAuthServiceAuthorize(clientId?: string, responseType?: string, redirectUri?: string, options?: AxiosRequestConfig) {
        return OAuthServiceApiFp(this.configuration).oAuthServiceAuthorize(clientId, responseType, redirectUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OauthTokenRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthServiceApi
     */
    public oAuthServiceToken(body: OauthTokenRequest, options?: AxiosRequestConfig) {
        return OAuthServiceApiFp(this.configuration).oAuthServiceToken(body, options).then((request) => request(this.axios, this.basePath));
    }
}


