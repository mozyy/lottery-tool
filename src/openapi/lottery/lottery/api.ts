/* tslint:disable */
/* eslint-disable */
/**
 * lottery.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface LotteryCreateRequest
 */
export interface LotteryCreateRequest {
    /**
     * 
     * @type {LotteryNewLottery}
     * @memberof LotteryCreateRequest
     */
    'lottery'?: LotteryNewLottery;
}
/**
 * 
 * @export
 * @interface LotteryCreateResponse
 */
export interface LotteryCreateResponse {
    /**
     * 
     * @type {LotteryLottery}
     * @memberof LotteryCreateResponse
     */
    'lottery'?: LotteryLottery;
}
/**
 * 
 * @export
 * @interface LotteryGetResponse
 */
export interface LotteryGetResponse {
    /**
     * 
     * @type {LotteryLottery}
     * @memberof LotteryGetResponse
     */
    'lottery'?: LotteryLottery;
}
/**
 * 
 * @export
 * @interface LotteryItem
 */
export interface LotteryItem {
    /**
     * 
     * @type {string}
     * @memberof LotteryItem
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof LotteryItem
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface LotteryListResponse
 */
export interface LotteryListResponse {
    /**
     * 
     * @type {Array<LotteryLottery>}
     * @memberof LotteryListResponse
     */
    'lotterys'?: Array<LotteryLottery>;
    /**
     * 
     * @type {PaginatePaginated}
     * @memberof LotteryListResponse
     */
    'paginated'?: PaginatePaginated;
}
/**
 * 
 * @export
 * @interface LotteryLottery
 */
export interface LotteryLottery {
    /**
     * 
     * @type {number}
     * @memberof LotteryLottery
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LotteryLottery
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof LotteryLottery
     */
    'title'?: string;
    /**
     * 
     * @type {LotteryType}
     * @memberof LotteryLottery
     */
    'type'?: LotteryType;
    /**
     * 
     * @type {Array<LotteryItem>}
     * @memberof LotteryLottery
     */
    'items'?: Array<LotteryItem>;
    /**
     * 
     * @type {boolean}
     * @memberof LotteryLottery
     */
    'remark'?: boolean;
    /**
     * 
     * @type {Array<LotteryRemark>}
     * @memberof LotteryLottery
     */
    'remarks'?: Array<LotteryRemark>;
    /**
     * 
     * @type {string}
     * @memberof LotteryLottery
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof LotteryLottery
     */
    'updatedAt'?: string;
}


/**
 * 
 * @export
 * @interface LotteryNewLottery
 */
export interface LotteryNewLottery {
    /**
     * 
     * @type {string}
     * @memberof LotteryNewLottery
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof LotteryNewLottery
     */
    'title'?: string;
    /**
     * 
     * @type {LotteryType}
     * @memberof LotteryNewLottery
     */
    'type'?: LotteryType;
    /**
     * 
     * @type {Array<LotteryItem>}
     * @memberof LotteryNewLottery
     */
    'items'?: Array<LotteryItem>;
    /**
     * 
     * @type {boolean}
     * @memberof LotteryNewLottery
     */
    'remark'?: boolean;
    /**
     * 
     * @type {Array<LotteryRemark>}
     * @memberof LotteryNewLottery
     */
    'remarks'?: Array<LotteryRemark>;
}


/**
 * 
 * @export
 * @interface LotteryRemark
 */
export interface LotteryRemark {
    /**
     * 
     * @type {string}
     * @memberof LotteryRemark
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LotteryRemark
     */
    'require'?: boolean;
}
/**
 * 
 * @export
 * @interface LotteryServiceUpdateRequest
 */
export interface LotteryServiceUpdateRequest {
    /**
     * 
     * @type {LotteryNewLottery}
     * @memberof LotteryServiceUpdateRequest
     */
    'lottery'?: LotteryNewLottery;
}
/**
 * - NUMBER: 个数  - PERCENT: 几率
 * @export
 * @enum {string}
 */

export const LotteryType = {
    Number: 'NUMBER',
    Percent: 'PERCENT'
} as const;

export type LotteryType = typeof LotteryType[keyof typeof LotteryType];


/**
 * 
 * @export
 * @interface LotteryUpdateResponse
 */
export interface LotteryUpdateResponse {
    /**
     * 
     * @type {LotteryLottery}
     * @memberof LotteryUpdateResponse
     */
    'lottery'?: LotteryLottery;
}
/**
 * 
 * @export
 * @interface PaginatePaginate
 */
export interface PaginatePaginate {
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginate
     */
    'page'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginate
     */
    'perPage'?: string;
}
/**
 * 
 * @export
 * @interface PaginatePaginated
 */
export interface PaginatePaginated {
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginated
     */
    'page'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginated
     */
    'perPage'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginated
     */
    'total'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatePaginated
     */
    'totalPages'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}

/**
 * LotteryServiceApi - axios parameter creator
 * @export
 */
export const LotteryServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LotteryCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotteryServiceCreate: async (body: LotteryCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('lotteryServiceCreate', 'body', body)
            const localVarPath = `/lottery.LotteryService/lotterys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotteryServiceDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('lotteryServiceDelete', 'id', id)
            const localVarPath = `/lottery.LotteryService/lotterys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotteryServiceGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('lotteryServiceGet', 'id', id)
            const localVarPath = `/lottery.LotteryService/lotterys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [lotteryId] id
         * @param {string} [lotteryUserId] id
         * @param {string} [lotteryTitle] lottery title
         * @param {'NUMBER' | 'PERCENT'} [lotteryType] lottery image   - NUMBER: 个数  - PERCENT: 几率
         * @param {boolean} [lotteryRemark] lottery summary
         * @param {string} [lotteryCreatedAt] 
         * @param {string} [lotteryUpdatedAt] 
         * @param {string} [paginatePage] 
         * @param {string} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotteryServiceList: async (lotteryId?: number, lotteryUserId?: string, lotteryTitle?: string, lotteryType?: 'NUMBER' | 'PERCENT', lotteryRemark?: boolean, lotteryCreatedAt?: string, lotteryUpdatedAt?: string, paginatePage?: string, paginatePerPage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lottery.LotteryService/lotterys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lotteryId !== undefined) {
                localVarQueryParameter['lottery.id'] = lotteryId;
            }

            if (lotteryUserId !== undefined) {
                localVarQueryParameter['lottery.userId'] = lotteryUserId;
            }

            if (lotteryTitle !== undefined) {
                localVarQueryParameter['lottery.title'] = lotteryTitle;
            }

            if (lotteryType !== undefined) {
                localVarQueryParameter['lottery.type'] = lotteryType;
            }

            if (lotteryRemark !== undefined) {
                localVarQueryParameter['lottery.remark'] = lotteryRemark;
            }

            if (lotteryCreatedAt !== undefined) {
                localVarQueryParameter['lottery.createdAt'] = (lotteryCreatedAt as any instanceof Date) ?
                    (lotteryCreatedAt as any).toISOString() :
                    lotteryCreatedAt;
            }

            if (lotteryUpdatedAt !== undefined) {
                localVarQueryParameter['lottery.updatedAt'] = (lotteryUpdatedAt as any instanceof Date) ?
                    (lotteryUpdatedAt as any).toISOString() :
                    lotteryUpdatedAt;
            }

            if (paginatePage !== undefined) {
                localVarQueryParameter['paginate.page'] = paginatePage;
            }

            if (paginatePerPage !== undefined) {
                localVarQueryParameter['paginate.perPage'] = paginatePerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LotteryServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotteryServiceUpdate: async (id: number, body: LotteryServiceUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('lotteryServiceUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('lotteryServiceUpdate', 'body', body)
            const localVarPath = `/lottery.LotteryService/lotterys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LotteryServiceApi - functional programming interface
 * @export
 */
export const LotteryServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LotteryServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LotteryCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lotteryServiceCreate(body: LotteryCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LotteryCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lotteryServiceCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lotteryServiceDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lotteryServiceDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lotteryServiceGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LotteryGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lotteryServiceGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [lotteryId] id
         * @param {string} [lotteryUserId] id
         * @param {string} [lotteryTitle] lottery title
         * @param {'NUMBER' | 'PERCENT'} [lotteryType] lottery image   - NUMBER: 个数  - PERCENT: 几率
         * @param {boolean} [lotteryRemark] lottery summary
         * @param {string} [lotteryCreatedAt] 
         * @param {string} [lotteryUpdatedAt] 
         * @param {string} [paginatePage] 
         * @param {string} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lotteryServiceList(lotteryId?: number, lotteryUserId?: string, lotteryTitle?: string, lotteryType?: 'NUMBER' | 'PERCENT', lotteryRemark?: boolean, lotteryCreatedAt?: string, lotteryUpdatedAt?: string, paginatePage?: string, paginatePerPage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LotteryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lotteryServiceList(lotteryId, lotteryUserId, lotteryTitle, lotteryType, lotteryRemark, lotteryCreatedAt, lotteryUpdatedAt, paginatePage, paginatePerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LotteryServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lotteryServiceUpdate(id: number, body: LotteryServiceUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LotteryUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lotteryServiceUpdate(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LotteryServiceApi - factory interface
 * @export
 */
export const LotteryServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LotteryServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {LotteryCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotteryServiceCreate(body: LotteryCreateRequest, options?: any): AxiosPromise<LotteryCreateResponse> {
            return localVarFp.lotteryServiceCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotteryServiceDelete(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.lotteryServiceDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotteryServiceGet(id: number, options?: any): AxiosPromise<LotteryGetResponse> {
            return localVarFp.lotteryServiceGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [lotteryId] id
         * @param {string} [lotteryUserId] id
         * @param {string} [lotteryTitle] lottery title
         * @param {'NUMBER' | 'PERCENT'} [lotteryType] lottery image   - NUMBER: 个数  - PERCENT: 几率
         * @param {boolean} [lotteryRemark] lottery summary
         * @param {string} [lotteryCreatedAt] 
         * @param {string} [lotteryUpdatedAt] 
         * @param {string} [paginatePage] 
         * @param {string} [paginatePerPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotteryServiceList(lotteryId?: number, lotteryUserId?: string, lotteryTitle?: string, lotteryType?: 'NUMBER' | 'PERCENT', lotteryRemark?: boolean, lotteryCreatedAt?: string, lotteryUpdatedAt?: string, paginatePage?: string, paginatePerPage?: string, options?: any): AxiosPromise<LotteryListResponse> {
            return localVarFp.lotteryServiceList(lotteryId, lotteryUserId, lotteryTitle, lotteryType, lotteryRemark, lotteryCreatedAt, lotteryUpdatedAt, paginatePage, paginatePerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LotteryServiceUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lotteryServiceUpdate(id: number, body: LotteryServiceUpdateRequest, options?: any): AxiosPromise<LotteryUpdateResponse> {
            return localVarFp.lotteryServiceUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LotteryServiceApi - object-oriented interface
 * @export
 * @class LotteryServiceApi
 * @extends {BaseAPI}
 */
export class LotteryServiceApi extends BaseAPI {
    /**
     * 
     * @param {LotteryCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotteryServiceApi
     */
    public lotteryServiceCreate(body: LotteryCreateRequest, options?: AxiosRequestConfig) {
        return LotteryServiceApiFp(this.configuration).lotteryServiceCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotteryServiceApi
     */
    public lotteryServiceDelete(id: number, options?: AxiosRequestConfig) {
        return LotteryServiceApiFp(this.configuration).lotteryServiceDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotteryServiceApi
     */
    public lotteryServiceGet(id: number, options?: AxiosRequestConfig) {
        return LotteryServiceApiFp(this.configuration).lotteryServiceGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [lotteryId] id
     * @param {string} [lotteryUserId] id
     * @param {string} [lotteryTitle] lottery title
     * @param {'NUMBER' | 'PERCENT'} [lotteryType] lottery image   - NUMBER: 个数  - PERCENT: 几率
     * @param {boolean} [lotteryRemark] lottery summary
     * @param {string} [lotteryCreatedAt] 
     * @param {string} [lotteryUpdatedAt] 
     * @param {string} [paginatePage] 
     * @param {string} [paginatePerPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotteryServiceApi
     */
    public lotteryServiceList(lotteryId?: number, lotteryUserId?: string, lotteryTitle?: string, lotteryType?: 'NUMBER' | 'PERCENT', lotteryRemark?: boolean, lotteryCreatedAt?: string, lotteryUpdatedAt?: string, paginatePage?: string, paginatePerPage?: string, options?: AxiosRequestConfig) {
        return LotteryServiceApiFp(this.configuration).lotteryServiceList(lotteryId, lotteryUserId, lotteryTitle, lotteryType, lotteryRemark, lotteryCreatedAt, lotteryUpdatedAt, paginatePage, paginatePerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LotteryServiceUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotteryServiceApi
     */
    public lotteryServiceUpdate(id: number, body: LotteryServiceUpdateRequest, options?: AxiosRequestConfig) {
        return LotteryServiceApiFp(this.configuration).lotteryServiceUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}


