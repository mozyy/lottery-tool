/* tslint:disable */
/* eslint-disable */
/**
 * lottery.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LotteryCreateRequest,
  LotteryCreateResponse,
  LotteryGetResponse,
  LotteryListResponse,
  LotteryServiceUpdateRequest,
  LotteryUpdateResponse,
  RpcStatus,
} from '../models';
import {
    LotteryCreateRequestFromJSON,
    LotteryCreateRequestToJSON,
    LotteryCreateResponseFromJSON,
    LotteryCreateResponseToJSON,
    LotteryGetResponseFromJSON,
    LotteryGetResponseToJSON,
    LotteryListResponseFromJSON,
    LotteryListResponseToJSON,
    LotteryServiceUpdateRequestFromJSON,
    LotteryServiceUpdateRequestToJSON,
    LotteryUpdateResponseFromJSON,
    LotteryUpdateResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models';

export interface LotteryServiceCreateRequest {
    body: LotteryCreateRequest;
}

export interface LotteryServiceDeleteRequest {
    id: number;
}

export interface LotteryServiceGetRequest {
    id: number;
}

export interface LotteryServiceListRequest {
    lotteryId?: number;
    lotteryUserId?: string;
    lotteryTitle?: string;
    lotteryType?: LotteryServiceListLotteryTypeEnum;
    lotteryRemark?: boolean;
    lotteryCreatedAt?: Date;
    lotteryUpdatedAt?: Date;
    paginatePage?: string;
    paginatePerPage?: string;
}

export interface LotteryServiceUpdateOperationRequest {
    id: number;
    body: LotteryServiceUpdateRequest;
}

/**
 * 
 */
export class LotteryServiceApi extends runtime.BaseAPI {

    /**
     */
    async lotteryServiceCreateRaw(requestParameters: LotteryServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling lotteryServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lottery.LotteryService/lotterys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LotteryCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async lotteryServiceCreate(requestParameters: LotteryServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryCreateResponse> {
        const response = await this.lotteryServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async lotteryServiceDeleteRaw(requestParameters: LotteryServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling lotteryServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lottery.LotteryService/lotterys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async lotteryServiceDelete(requestParameters: LotteryServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.lotteryServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async lotteryServiceGetRaw(requestParameters: LotteryServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling lotteryServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lottery.LotteryService/lotterys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async lotteryServiceGet(requestParameters: LotteryServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryGetResponse> {
        const response = await this.lotteryServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async lotteryServiceListRaw(requestParameters: LotteryServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.lotteryId !== undefined) {
            queryParameters['lottery.id'] = requestParameters.lotteryId;
        }

        if (requestParameters.lotteryUserId !== undefined) {
            queryParameters['lottery.userId'] = requestParameters.lotteryUserId;
        }

        if (requestParameters.lotteryTitle !== undefined) {
            queryParameters['lottery.title'] = requestParameters.lotteryTitle;
        }

        if (requestParameters.lotteryType !== undefined) {
            queryParameters['lottery.type'] = requestParameters.lotteryType;
        }

        if (requestParameters.lotteryRemark !== undefined) {
            queryParameters['lottery.remark'] = requestParameters.lotteryRemark;
        }

        if (requestParameters.lotteryCreatedAt !== undefined) {
            queryParameters['lottery.createdAt'] = (requestParameters.lotteryCreatedAt as any).toISOString();
        }

        if (requestParameters.lotteryUpdatedAt !== undefined) {
            queryParameters['lottery.updatedAt'] = (requestParameters.lotteryUpdatedAt as any).toISOString();
        }

        if (requestParameters.paginatePage !== undefined) {
            queryParameters['paginate.page'] = requestParameters.paginatePage;
        }

        if (requestParameters.paginatePerPage !== undefined) {
            queryParameters['paginate.perPage'] = requestParameters.paginatePerPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lottery.LotteryService/lotterys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryListResponseFromJSON(jsonValue));
    }

    /**
     */
    async lotteryServiceList(requestParameters: LotteryServiceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryListResponse> {
        const response = await this.lotteryServiceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async lotteryServiceUpdateRaw(requestParameters: LotteryServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling lotteryServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling lotteryServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lottery.LotteryService/lotterys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LotteryServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async lotteryServiceUpdate(requestParameters: LotteryServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryUpdateResponse> {
        const response = await this.lotteryServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const LotteryServiceListLotteryTypeEnum = {
    Number: 'NUMBER',
    Percent: 'PERCENT'
} as const;
export type LotteryServiceListLotteryTypeEnum = typeof LotteryServiceListLotteryTypeEnum[keyof typeof LotteryServiceListLotteryTypeEnum];
