/* tslint:disable */
/* eslint-disable */
/**
 * user.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  UserCreateRequest,
  UserCreateResponse,
  UserGetResponse,
  UserInfoResponse,
  UserListResponse,
  UserLoginRequest,
  UserLoginResponse,
  UserServiceUpdateRequest,
  UserUpdateResponse,
} from '../models';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    UserCreateRequestFromJSON,
    UserCreateRequestToJSON,
    UserCreateResponseFromJSON,
    UserCreateResponseToJSON,
    UserGetResponseFromJSON,
    UserGetResponseToJSON,
    UserInfoResponseFromJSON,
    UserInfoResponseToJSON,
    UserListResponseFromJSON,
    UserListResponseToJSON,
    UserLoginRequestFromJSON,
    UserLoginRequestToJSON,
    UserLoginResponseFromJSON,
    UserLoginResponseToJSON,
    UserServiceUpdateRequestFromJSON,
    UserServiceUpdateRequestToJSON,
    UserUpdateResponseFromJSON,
    UserUpdateResponseToJSON,
} from '../models';

export interface UserServiceCreateRequest {
    body: UserCreateRequest;
}

export interface UserServiceDeleteRequest {
    id: string;
}

export interface UserServiceGetRequest {
    id: string;
}

export interface UserServiceLoginRequest {
    body: UserLoginRequest;
}

export interface UserServiceUpdateOperationRequest {
    id: string;
    body: UserServiceUpdateRequest;
}

/**
 * 
 */
export class UserServiceApi extends runtime.BaseAPI {

    /**
     */
    async userServiceCreateRaw(requestParameters: UserServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user.UserService/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceCreate(requestParameters: UserServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCreateResponse> {
        const response = await this.userServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userServiceDeleteRaw(requestParameters: UserServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user.UserService/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async userServiceDelete(requestParameters: UserServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.userServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userServiceGetRaw(requestParameters: UserServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user.UserService/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceGet(requestParameters: UserServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserGetResponse> {
        const response = await this.userServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userServiceInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user.UserService/info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfoResponse> {
        const response = await this.userServiceInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userServiceListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user.UserService/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserListResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserListResponse> {
        const response = await this.userServiceListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 小程序登录, 返回oauth的token
     */
    async userServiceLoginRaw(requestParameters: UserServiceLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userServiceLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user.UserService/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLoginResponseFromJSON(jsonValue));
    }

    /**
     * 小程序登录, 返回oauth的token
     */
    async userServiceLogin(requestParameters: UserServiceLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLoginResponse> {
        const response = await this.userServiceLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userServiceUpdateRaw(requestParameters: UserServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user.UserService/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceUpdate(requestParameters: UserServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserUpdateResponse> {
        const response = await this.userServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
